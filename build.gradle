import com.amazonaws.AmazonClientException
import com.amazonaws.auth.EnvironmentVariableCredentialsProvider
import com.amazonaws.auth.profile.*
import com.amazonaws.auth.BasicSessionCredentials

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.amazonaws:aws-java-sdk-core:1.11.25'
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'ivy-publish'
}

repositories {
    jcenter()
    ivy {
        artifactPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[artifact]-[revision](-[classifier]).[ext]'
        ivyPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[module]-[revision].xml'
    }
}

group 'io.sqreen'
version '1.1.2'

sourceCompatibility = 1.6
targetCompatibility = 1.6

def WINDOWS = org.gradle.internal.os.OperatingSystem.current().windows

task cmakeNativeLibDebug(type: Exec) {
    outputs.upToDateWhen { false }
    description = 'Runs cmake in a debug configuration'

    def pwafConfDir = project.hasProperty('libsqreenConfig') ?
            project.libSqreenConfig :
            "$projectDir/libsqreen/Debug/out/usr/local/share/cmake/libsqreen"

    doFirst {
        def f = file("$pwafConfDir/libsqreenConfig.cmake")
        if (!f.exists()) {
            logger.warn("The file $f does not exist. libsqreen debug must be installed globally. " +
                    "Run with -PlibsqreenConfig=/path/to/dir/of/libsqreenConfig-debug.cmake to override")
        }

        file("$buildDir/Debug").mkdirs()
    }

    inputs.file 'CMakeLists.txt'
    outputs.dir "$buildDir/Debug/"

    logging.captureStandardError  LogLevel.ERROR
    logging.captureStandardOutput LogLevel.INFO

    def cmakeOpts
    if (project.hasProperty('withASAN')) {
        cmakeOpts = [
            '-DCMAKE_C_FLAGS=-fsanitize=address -fsanitize=leak --coverage',
            '-DCMAKE_SHARED_LINKER_FLAGS=-fsanitize=address -fsanitize=leak --coverage',
        ]
        if (WINDOWS) {
            logger.warn('Address sanitizer not supported on Windows')
        }
    } else {
        cmakeOpts = [
            '-DCMAKE_C_FLAGS=--coverage',
            '-DCMAKE_SHARED_LINKER_FLAGS=--coverage',
        ]
    }

    if (WINDOWS) {
        commandLine 'cmake', "-DCMAKE_PREFIX_PATH=$pwafConfDir", projectDir
    } else {
        commandLine('cmake', '-DCMAKE_BUILD_TYPE=Debug', "-DCMAKE_PREFIX_PATH=$pwafConfDir",
                             *cmakeOpts, projectDir)
    }

    workingDir "$buildDir/Debug"
}

task buildNativeLibDebug(type: Exec) {
    outputs.upToDateWhen { false }
    description = 'Builds the native JNI lib in a debug configuration'
    group = 'test'

    inputs.dir 'src/main/c'
    if (WINDOWS) {
        outputs.file "$buildDir/Debug/Debug/libsqreen_jni.dll"
    } else {
        outputs.file "$buildDir/Debug/libsqreen_jni.so"
    }

    logging.captureStandardError  LogLevel.ERROR
    logging.captureStandardOutput LogLevel.INFO

    if (WINDOWS) {
        commandLine 'cmake', '--build', '.', '--target', 'sqreen_jni',
                             '-j', '--verbose', '--config', 'Debug'
    } else {
        commandLine 'make', '-j', 'sqreen_jni', 'VERBOSE=1'
    }
    workingDir "$buildDir/Debug"

    dependsOn cmakeNativeLibDebug
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }
}

dependencies {
    compile group: 'io.sqreen', name: 'logging', version: '2.1'
    compile group: 'com.google.guava', name: 'guava', version: '20.0', { // last version for java6
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.google.errorprone',    module: 'error_prone_annotations'
        exclude group: 'com.google.j2objc',        module: 'j2objc-annotations'
        exclude group: 'org.codehaus.mojo',        module: 'animal-sniffer-annotations'
    }

    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.2'
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.17'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.2', {
        exclude group: 'org.eclipse.jetty', module: 'jetty-server'
        exclude group: 'org.eclipse.jetty', module: 'jetty-servlet'
        exclude group: 'org.eclipse.jetty', module: 'jetty-servlets'
        exclude group: 'org.eclipse.jetty', module: 'jetty-webapp'
        exclude group: 'org.eclipse.jetty', module: 'jetty-proxy'
        exclude group: 'com.google.guava', module: 'guava'
//        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
//        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
//        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.xmlunit', module: 'xmlunit-core'
        exclude group: 'org.xmlunit', module: 'xmlunit-legacy'
        exclude group: 'org.xmlunit', module: 'xmlunit-placeholders'
        exclude group: 'com.jayway.jsonpath', module: 'json-path'
        exclude group: 'org.ow2.asm', module: 'asm'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'net.sf.jopt-simple', module: 'jopt-simple'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
        exclude group: 'com.github.jknack', module: 'handlebars'
        exclude group: 'com.github.jknack', module: 'handlebars-helpers'
//        exclude group: 'com.flipkart.zjsonpatch', module: 'zjsonpatch'
        exclude group: 'commons-fileupload', module: 'commons-fileupload'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

def nativeLibsDir = "$projectDir/native_libs"

task checkForNativeLibs {
    doLast {
        def tree = fileTree(dir: nativeLibsDir, include: ['**/*.so', '**/*.dylib', '**/*.dll'])
        if (tree.empty) {
            throw new GradleException("Could find no libraries in $tree")
        }
    }
}

task packageDebugSymbols(type: Zip) {
    archiveClassifier = 'dbgsym'

    from nativeLibsDir, {
        include '**/*.pdb'
        include '**/*.debug'
        include '**/*.dwarf'
    }

    dependsOn checkForNativeLibs
}

publishing {
    repositories {
        ivy {
            artifactPattern 's3://sqreen-ci-java/jars/[organisation]/[artifact]-[revision](-[classifier]).[ext]'
            ivyPattern 's3://sqreen-ci-java/jars/[organisation]/[module]-[revision].xml'

            BasicSessionCredentials creds = null
            try {
                //looks in AWS_ACCESS_KEY_ID (or AWS_ACCESS_KEY) and AWS_SECRET_KEY
                // (or AWS_SECRET_ACCESS_KEY) environment variables.
                creds = new EnvironmentVariableCredentialsProvider().credentials
            } catch (AmazonClientException e) {
                logger.warn 'No AWS credentials in env variables'
                try {
                    // creds can be in env variables or ~/.aws/{credentials,config}
                    creds = new ProfileCredentialsProvider('mfa').credentials
                } catch (IllegalArgumentException ee) {
                    logger.warn 'No AWS credentials in ~/.aws/credentials'
                } catch (NullPointerException npe) {
                    logger.warn 'No AWS credentials in ~/.aws/credentials'
                }
            }

            if (creds) {
                credentials(AwsCredentials) {
                    accessKey = creds.AWSAccessKeyId
                    secretKey = creds.AWSSecretKey
                    sessionToken = creds.sessionToken
                }
            }
        }
    }
    publications {
        ivy(IvyPublication) {
            from components.java
            artifact(sourcesJar) {
                type = 'sources'
                conf = 'compile'
            }
            artifact(packageDebugSymbols) {
                classifier = 'dbgsym'
                extension = 'zip'
            }
            descriptor.description {
                text = description
            }
        }
    }
}

task copyNativeLibs(type: Copy) {
    def existsLib = { filename ->
        def fileObj = file("$nativeLibsDir/${filename}")
        if (!fileObj.exists()) {
            logger.warn("Could not find ${fileObj.absolutePath}")
            false
        } else {
            true
        }
    }
    def directories = [['linux_64_glibc/libsqreen_jni.so', 'linux_64_glibc/libSqreen.so'],
                       ['linux_64_musl/libsqreen_jni.so', 'linux_64_musl/libSqreen.so'],
                       ['solaris_64/libsqreen_jni.so', 'solaris_64/libSqreen.so'],
                       ['osx_64/libsqreen_jni.dylib', 'osx_64/libSqreen.dylib.dwarf'],
                       ['windows_64/sqreen_jni.dll']]


    doFirst {
        if (!directories.any { files -> files.every(existsLib) }) {
            throw new GradleException("Could not find any native lib")
        }
    }

    from nativeLibsDir, {
        include '**/*.so'
        include '**/*.dylib'
        include '**/*.dll'
    }
    into "${sourceSets.main.output.resourcesDir}/native_libs/"

    dependsOn checkForNativeLibs
}

jar.dependsOn(copyNativeLibs)

sourceSets {
    testGC {
        java.srcDir "src/test_gc/java"
        groovy.srcDir "src/test_gc/groovy"
        resources.srcDir "src/test_gc/resources"

        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}
configurations {
    testGCCompile.extendsFrom(testCompile)
    testGCRuntime.extendsFrom(testRuntime)
}

task testgc(type: Test) {
    description = 'Tests that the library can be unloaded'
    group = 'verification'
    useJUnit()

    testClassesDirs = sourceSets.testGC.output.classesDirs
    classpath = sourceSets.testGC.runtimeClasspath

    outputs.upToDateWhen { false }
}
check.dependsOn testgc

tasks.withType(Test).each {
    it.jvmArgs += ['-Xcheck:jni']
    if (project.hasProperty('useReleaseBinaries')) {
        it.jvmArgs += ['-DuseReleaseBinaries=true']
        it.dependsOn copyNativeLibs
    } else {
        def javaLibPath = WINDOWS ? "$buildDir\\Debug\\Debug" : "$buildDir/Debug"
        it.jvmArgs += ["-Djava.library.path=$javaLibPath"]
        it.dependsOn buildNativeLibDebug
    }

    it.outputs.upToDateWhen { false }
}

task generateJniHeaders(type: JavaCompile) {
    classpath = sourceSets.main.compileClasspath
    destinationDir file("${buildDir}/generated/jni")
    source = sourceSets.main.java
    options.compilerArgs += [
            '-h', file("${buildDir}/generated/jni"),
            '-d', file("${buildDir}/generated/jni-tmp")
    ]
    // options.verbose = true
    doFirst {
        ['jni', 'jni-tmp'].each { mkdir "${buildDir}/generated/$it" }
    }
    doLast {
        delete file("${buildDir}/generated/jni-tmp")
    }
}

// vim: set et ts=4 sw=4 list:
