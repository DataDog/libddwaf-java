import com.amazonaws.AmazonClientException
import com.amazonaws.auth.EnvironmentVariableCredentialsProvider
import com.amazonaws.auth.profile.*
import com.amazonaws.services.s3.*
import com.amazonaws.services.s3.model.*
import org.gradle.jvm.toolchain.internal.SpecificInstallationToolchainSpec

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.amazonaws:aws-java-sdk-core:1.11.25'
        classpath 'com.amazonaws:aws-java-sdk-s3:1.11.25'
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'ivy-publish'
    id 'codenarc'
}

repositories {
    mavenCentral()
    ivy {
        artifactPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[artifact]-[revision](-[classifier]).[ext]'
        ivyPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[module]-[revision].xml'
    }
}

group 'io.sqreen'
version '9.2.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def WINDOWS = org.gradle.internal.os.OperatingSystem.current().windows
def MACOS = org.gradle.internal.os.OperatingSystem.current().macOsX

def libddwafDir = "$projectDir/libddwaf"
def cmakeBuildSuffix = project.hasProperty('withASAN') ? "asan" : "debug"
// We keep everything under gradle's build directory to have it cleaned with `gradle clean`.
// ASAN and Debug builds use different directories to avoid cache mismatches.
def cmakeLibddwafDir = "$projectDir/build/libddwaf-cmake-${cmakeBuildSuffix}"
def libddwafInstallPrefix = "$projectDir/build/libddwaf-out-${cmakeBuildSuffix}"
def cmakeNativeLibDir = "$projectDir/build/cmake-${cmakeBuildSuffix}"

task cmakeLibddwafDebug(type: Exec) {
    outputs.upToDateWhen { false }
    description = 'Runs cmake in a debug configuration'

    doFirst {
        file(cmakeLibddwafDir).mkdirs()
    }

    def cflags = []
    if (!WINDOWS) {
        cflags += ['-fno-omit-frame-pointer']
    }

    def cmakeOpts = []

    if (project.hasProperty('withASAN')) {
        cflags += ['-fsanitize=address,leak,undefined', '--coverage']
        cmakeOpts += [
                '-DCMAKE_C_COMPILER=gcc-12',
                '-DCMAKE_CXX_COMPILER=g++-12',
                '-DCMAKE_EXE_LINKER_FLAGS=-fsanitize=address,leak,undefined',
                '-DCMAKE_MODULE_LINKER_FLAGS=-fsanitize=address,leak,undefined',
                '-DCMAKE_SHARED_LINKER_FLAGS=-fsanitize=address,leak,undefined',
                '-DCMAKE_SHARED_LINKER_FLAGS=-fsanitize=address,leak,undefined',
        ]
        assert !WINDOWS, 'Address sanitizer not supported on Windows'
    }

    cmakeOpts += [
        '-DCMAKE_BUILD_TYPE=Debug',
        "-DCMAKE_C_FLAGS=${cflags.join(' ')}",
        "-DCMAKE_CXX_FLAGS=${cflags.join(' ')}",
    ]

    commandLine 'cmake', '-S', libddwafDir, '-B', '.', *cmakeOpts
    workingDir cmakeLibddwafDir
}

task buildLibddwafDebug() {
    outputs.upToDateWhen { false }
    description = 'Builds the libddwaf in a debug configuration'
    group = 'test'

    dependsOn cmakeLibddwafDebug

    inputs.dir 'libddwaf/src'
    inputs.dir cmakeLibddwafDir
    outputs.dir libddwafInstallPrefix

    doLast {
        exec {
            commandLine 'cmake', '--build', '.', '--parallel'
            workingDir cmakeLibddwafDir

        }
        exec {
            commandLine 'cmake', '--install', '.', '--prefix', libddwafInstallPrefix
            workingDir cmakeLibddwafDir
        }
    }
}

task cmakeNativeLibDebug(type: Exec) {
    outputs.upToDateWhen { false }
    description = 'Runs cmake in a debug configuration'

    def libddwafConfDir = "$libddwafInstallPrefix/share/cmake/libddwaf"
    if (project.hasProperty('libddwafConfig')) {
        libddwafConfDir = project.property('libddwafConfig')
        doFirst {
            def f = file("$libddwafConfDir/libddwaf-config-debug.cmake")
            if (!f.exists()) {
                logger.warn("The file $f does not exist. libddwaf debug must be installed globally. " +
                        "Run with -PlibddwafConfig=/path/to/dir/of/libddwaf-config-debug.cmake to override")
            }
        }
    } else {
        dependsOn buildLibddwafDebug
    }

    doFirst {
        file(cmakeNativeLibDir).mkdirs()
    }

    inputs.file 'CMakeLists.txt'
    outputs.dir cmakeNativeLibDir

    logging.captureStandardError  LogLevel.ERROR
    logging.captureStandardOutput LogLevel.INFO

    def cflags = ['--coverage']
    def linkerFlags = ['--coverage']
    if (!WINDOWS) {
        cflags += ['-fno-omit-frame-pointer']
    }

    def cmakeOpts = [
            '-DCMAKE_BUILD_TYPE=Debug',
    ]

    if (project.hasProperty('withASAN')) {
        cflags += ['-fsanitize=address,leak,undefined']
        linkerFlags += ['-fsanitize=address,leak,undefined', '-lubsan', '-lasan']
        cmakeOpts += [
                '-DCMAKE_C_COMPILER=gcc-12',
                '-DCMAKE_CXX_COMPILER=g++-12',
        ]
        assert !WINDOWS, 'Address sanitizer not supported on Windows'
    }

    if (project.hasProperty('macArch')) {
        cmakeOpts += ["-DCMAKE_OSX_ARCHITECTURES=${project.macArch}"]
    }

    cmakeOpts += [
            "-DCMAKE_C_FLAGS=${cflags.join(' ')}",
            "-DCMAKE_SHARED_LINKER_FLAGS=${linkerFlags.join(' ')}",
    ]

    commandLine 'cmake', '-DCMAKE_BUILD_TYPE=Debug', "-DCMAKE_PREFIX_PATH=$libddwafConfDir", *cmakeOpts, '-S', projectDir, '-B', '.'
    workingDir cmakeNativeLibDir
}

task buildNativeLibDebug(type: Exec) {
    outputs.upToDateWhen { false }
    description = 'Builds the native JNI lib in a debug configuration'
    group = 'test'

    inputs.dir 'src/main/c'
    if (WINDOWS) {
        outputs.file "$cmakeNativeLibDir/Debug/libsqreen_jni.dll"
    } else if (MACOS) {
        outputs.file "$cmakeNativeLibDir/libsqreen_jni.dylib"
    } else {
        outputs.file "$cmakeNativeLibDir/libsqreen_jni.so"
    }

    logging.captureStandardError  LogLevel.ERROR
    logging.captureStandardOutput LogLevel.INFO

    if (WINDOWS) {
        commandLine 'cmake', '--build', '.', '--target', 'sqreen_jni',
                             '-j', '--verbose', '--config', 'Debug'
    } else {
        commandLine 'cmake', '--build', '.', '--parallel', '--verbose'
    }
    workingDir cmakeNativeLibDir

    dependsOn cmakeNativeLibDebug
}

jacocoTestReport {
    executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
    mustRunAfter 'testgc'
    mustRunAfter 'testNoByteBuffers'
}

sourceSets {
    testGC {
        java.srcDir "src/test_gc/java"
        groovy.srcDir "src/test_gc/groovy"
        resources.srcDir "src/test_gc/resources"
    }
}
configurations {
    testGCCompileClasspath.extendsFrom(testCompileClasspath)
    testGCRuntimeClasspath.extendsFrom(testRuntimeClasspath)
}

def SLF4J_VERSION = '1.7.30'
dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: SLF4J_VERSION

    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: SLF4J_VERSION
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.apache.groovy', name: 'groovy-all', version: '4.0.18'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.2'

    testGCRuntimeOnly files(sourceSets.main.output)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

def nativeLibsDir = "$projectDir/native_libs"

task checkForNativeLibs {
    doLast {
        def tree = fileTree(dir: nativeLibsDir, include: ['**/*.so', '**/*.dylib', '**/*.dll'])
        if (tree.empty) {
            throw new GradleException("Could find no libraries in $tree")
        }
    }
}

task packageDebugSymbols(type: Zip) {
    archiveClassifier = 'dbgsym'

    from nativeLibsDir, {
        include '**/*.pdb'
        include '**/*.debug'
        include '**/*.dwarf'
    }

    dependsOn checkForNativeLibs
}

def creds = null
try {
    //looks in AWS_ACCESS_KEY_ID (or AWS_ACCESS_KEY) and AWS_SECRET_KEY
    // (or AWS_SECRET_ACCESS_KEY) environment variables.
    creds = new EnvironmentVariableCredentialsProvider().credentials
} catch (AmazonClientException e) {
    logger.warn 'No AWS credentials in env variables'
    try {
        // creds can be in env variables or ~/.aws/{credentials,config}
        creds = new ProfileCredentialsProvider('mfa').credentials
    } catch (IllegalArgumentException ee) {
        logger.warn 'No AWS credentials in ~/.aws/credentials'
    } catch (NullPointerException npe) {
        logger.warn 'No AWS credentials in ~/.aws/credentials'
    }
}

publishing {
    repositories {
        ivy {
            artifactPattern 's3://sqreen-ci-java/jars/[organisation]/[artifact]-[revision](-[classifier]).[ext]'
            ivyPattern 's3://sqreen-ci-java/jars/[organisation]/[module]-[revision].xml'

            if (creds) {
                credentials(AwsCredentials) {
                    accessKey = creds.AWSAccessKeyId
                    secretKey = creds.AWSSecretKey
                    if (creds.hasProperty('sessionToken')) {
                        sessionToken = creds.sessionToken
                    }
                }
            }
        }
    }
    publications {
        ivy(IvyPublication) {
            from components.java
            artifact(sourcesJar) {
                type = 'sources'
                conf = 'compile'
            }
            artifact(packageDebugSymbols) {
                classifier = 'dbgsym'
                extension = 'zip'
            }
            descriptor.description {
                text = description
            }
        }
    }
}

task fixS3Permissions {
    doLast {
        def bucket = 'sqreen-ci-java'
        def s3 = new AmazonS3Client(creds)
        ObjectListing listing = s3.listObjects(bucket,
                "jars/io.sqreen/libsqreen-${project.version}")
        for (S3ObjectSummary summary: listing.objectSummaries) {
            logger.info "Setting ACL for ${summary.key}"
            s3.setObjectAcl(bucket, summary.key, CannedAccessControlList.PublicRead)
        }
    }
    publish.finalizedBy it
}

task copyNativeLibs(type: Copy) {
    def existsLib = { filename ->
        def fileObj = file("$nativeLibsDir/${filename}")
        if (!fileObj.exists()) {
            logger.warn("Could not find ${fileObj.absolutePath}")
            false
        } else {
            true
        }
    }
    def directories = [['linux/x86_64/glibc/libsqreen_jni.so', 'linux/x86_64/libddwaf.so'],
                       ['linux/x86_64/musl/libsqreen_jni.so', 'linux/x86_64/libddwaf.so'],
                       ['linux/aarch64/glibc/libsqreen_jni.so', 'linux/aarch64/libddwaf.so'],
                       ['linux/aarch64/musl/libsqreen_jni.so', 'linux/aarch64/libddwaf.so'],
                       ['macos/x86_64/libsqreen_jni.dylib', 'macos/x86_64/libddwaf.dylib'],
                       ['macos/aarch64/libsqreen_jni.dylib', 'macos/aarch64/libddwaf.dylib'],
                       ['windows/x86_64/sqreen_jni.dll']]

    doFirst {
        if (!directories.any { files -> files.every(existsLib) }) {
            throw new GradleException("Could not find any native lib")
        }
    }

    from nativeLibsDir, {
        include '**/*.so'
        include '**/*.dylib'
        include '**/*.dll'
    }
    into "${sourceSets.main.output.resourcesDir}/native_libs/"

    dependsOn checkForNativeLibs
}

tasks.withType(JavaCompile).configureEach {
    mustRunAfter copyNativeLibs
}
jar.dependsOn copyNativeLibs

task testgc(type: Test) {
    description = 'Tests that the library can be unloaded'
    group = 'verification'
    useJUnit()

    testClassesDirs = sourceSets.testGC.output.classesDirs
    classpath = sourceSets.testGC.runtimeClasspath
}
check.dependsOn testgc

task testNoByteBuffers(type: Test) {
    group = 'verification'

    jvmArgs += ['-DPOWERWAF_ENABLE_BYTE_BUFFERS=0']
}
check.dependsOn testNoByteBuffers

tasks.withType(Test).configureEach {
    if (System.getenv('TEST_EXECUTABLE')) {
        it.executable System.getenv('TEST_EXECUTABLE')
    }

    // Select alternative JVM for tests.
    // Based on https://github.com/DataDog/dd-trace-java/blob/master/gradle/java_no_deps.gradle
    def testJavaHome = gradle.startParameter.projectProperties["testJavaHome"]
    if (testJavaHome != null) {
        def jvmSpec = new SpecificInstallationToolchainSpec(project.getObjects(), file(testJavaHome))
        Provider<JavaLauncher> launcher = providers.provider {
            try {
                return javaToolchains.launcherFor(jvmSpec).get()
            } catch (NoSuchElementException ignored) {
                throw new GradleException("Unable to find launcher for Java $testJavaHome")
            }
        }
        it.javaLauncher = launcher
    }

    if (it.javaLauncher.get().metadata.vendor == "IBM") {
        // FIXME(APPSEC-52250): We have JNI checks warnings with J9, so we make them non-fatal for now.
        it.jvmArgs += ['-Xcheck:jni:nonfatal']
    } else {
        it.jvmArgs += ['-Xcheck:jni']
    }

    it.jvmArgs += ['-Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG', '-DPOWERWAF_EXIT_ON_LEAK=true']
    if (project.hasProperty('useReleaseBinaries')) {
        it.jvmArgs += ['-DuseReleaseBinaries=true']
        it.dependsOn copyNativeLibs
    } else {
        def javaLibPath = WINDOWS ? "$cmakeNativeLibDir\\Debug" : "$cmakeNativeLibDir"
        it.jvmArgs += ["-Djava.library.path=$javaLibPath"]
        it.dependsOn buildNativeLibDebug
    }

    if (project.hasProperty("withASAN")) {
        it.environment ASAN_OPTIONS: 'verbosity=1 handle_segv=0 fast_unwind_on_malloc=0 detect_leaks=0', LD_PRELOAD: '/usr/lib/x86_64-linux-gnu/libasan.so.8'
    }

    it.outputs.upToDateWhen { false }
}

// the headers are incorrect wrt inner classes
// see https://bugs.openjdk.java.net/browse/JDK-8145897
task generateJniHeaders(type: JavaCompile) {
    classpath = sourceSets.main.compileClasspath
    destinationDirectory = file("${buildDir}/generated/jni")
    source = sourceSets.main.java
    options.compilerArgs += [
            '-h', file("${buildDir}/generated/jni"),
            '-d', file("${buildDir}/generated/jni-tmp")
    ]
    // options.verbose = true
    doFirst {
        ['jni', 'jni-tmp'].each { mkdir "${buildDir}/generated/$it" }
    }
    doLast {
        delete file("${buildDir}/generated/jni-tmp")
    }
}

codenarc {
    configFile = file("${project.projectDir}/gradle/codenarc.groovy")
}
codenarcTest {
    compilationClasspath = codenarcMain.compilationClasspath +
            sourceSets.test.compileClasspath + sourceSets.test.output
}

// vim: set et ts=4 sw=4 list:
