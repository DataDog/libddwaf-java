name: Build Native Libraries
on:
  pull_request:
  push:
    branches: [ master ]
    tags: '*'
defaults:
  run:
    shell: bash
env:
  buildType: RelWithDebInfo
  tempdir: ${{ github.workspace }}/build
jobs:
  Coverage:
    runs-on: ubuntu-22.04
    if: "!(contains(github.ref, 'refs/tags/v'))"
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - name: Cache Gradle artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build and test
        run: |
          ./gradlew check jacocoTestReport
      - name: Generate native coverage report
        run: |
          sudo apt-get install -y gcovr
          gcovr -f '.*src/main/c/.*' -x -d -o build/coverage.xml
      - name: Submit coverage
        uses: codecov/codecov-action@v2
        with:
          flags: helper
          verbose: true
          files: build/coverage.xml,build/reports/jacoco/test/jacocoTestReport.xml

  Native_binaries_Stage_macos_x86_64:
    name: MacOS x86_64
    runs-on: macOS-12
    env:
      os: macos
      arch: x86_64
      libc: ""
      artifactsuff: macos-x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build JNI bindings
        run: ci/build build-bindings --os '${{ env.os }}' --arch '${{ env.arch }}' --libc '${{ env.libc }}'
      - name: Run tests
        run: ci/build run-tests --os '${{ env.os }}' --arch '${{ env.arch }}' --libc '${{ env.libc }}'
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/native_libs
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_macos_aarch64:
    name: MacOS aarch64
    runs-on: macOS-12
    env:
      os: macos
      arch: aarch64
      libc: ""
      artifactsuff: macos-aarch64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build JNI bindings
        run: ci/build build-bindings --os '${{ env.os }}' --arch '${{ env.arch }}' --libc '${{ env.libc }}'
      # No arm64 tests for now (will do with macos-13)
      #- name: Run tests
      #  run: ci/build run-tests --os '${{ env.os }}' --arch '${{ env.arch }}' --libc '${{ env.libc }}'
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/native_libs
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_windows_x86_64:
    name: Windows x86_64
    runs-on: windows-2019
    defaults:
      run:
        shell: bash
    env:
      os: windows
      arch: x86_64
      libc: ""
      artifactsuff: win-x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
        name: Setup x86_64 build
        with:
          toolset: 14.29
          arch: amd64
      - name: Build JNI bindings
        run: ci/build build-bindings --os '${{ env.os }}' --arch '${{ env.arch }}' --libc '${{ env.libc }}'
      - name: Run tests
        run: ci/build run-tests --os '${{ env.os }}' --arch '${{ env.arch }}' --libc '${{ env.libc }}'
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/native_libs
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_linux_x86_64_glibc:
    name: Linux x86_64 (glibc)
    runs-on: ubuntu-20.04
    env:
      os: linux
      arch: x86_64
      libc: glibc
      artifactsuff: linux_glibc-x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build docker image
        run: ci/build build-docker-image --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Build JNI bindings
        run: ci/build build-bindings-in-docker --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Run tests
        run: ci/build run-tests-in-docker --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/native_libs
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_linux_x86_64_musl:
    name: Linux x86_64 (musl)
    runs-on: ubuntu-20.04
    env:
      os: linux
      arch: x86_64
      libc: musl
      artifactsuff: linux_musl-x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build docker image
        run: ci/build build-docker-image --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Build JNI bindings
        run: ci/build build-bindings-in-docker --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Run tests
        run: ci/build run-tests-in-docker --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/native_libs
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_linux_aarch64_glibc:
    name: Linux aarch64 (glibc)
    runs-on: ubuntu-22.04
    env:
      os: linux
      arch: aarch64
      libc: glibc
      artifactsuff: linux_glibc-aarch64s
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build docker image
        run: ci/build build-docker-image --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Build JNI bindings
        run: ci/build build-bindings-in-docker --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Run tests
        run: ci/build run-tests-in-docker --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/native_libs
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_linux_aarch64_musl:
    name: Linux aarch64 (musl)
    runs-on: ubuntu-22.04
    env:
      os: linux
      arch: aarch64
      libc: musl
      artifactsuff: linux_musl-aarch64s
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build docker image
        run: ci/build build-docker-image --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Build JNI bindings
        run: ci/build build-bindings-in-docker --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Run tests
        run: ci/build run-tests-in-docker --os ${{ env.os }} --arch ${{ env.arch }} --libc ${{ env.libc }}
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: build/native_libs
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_asan:
    name: ASAN/static analyzer on Linux
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout project
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install GCC and clang
      run: |
        sudo apt-get update
        sudo apt-get install -y libc++-dev libc++abi-dev libc++abi1 libstdc++-12-dev gcc g++ \
          clang clang-tools ruby
      shell: bash
    - name: Build libddwaf
      run: |
        set -ex
        cd libddwaf
        mkdir Debug && cd Debug
        cmake .. -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER="gcc-13" \
          -DCMAKE_CXX_COMPILER="g++-13" \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_C_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_MODULE_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_SHARED_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak"
        VERBOSE=1 make -j
        DESTDIR=out make install
      shell: bash
    - name: Run static analyzer
      run: |
        ci/static_analysis
      shell: bash
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Run Binding Tests
      run: |
        set -ex
        VERBOSE=1 ./gradlew --build-cache buildNativeLibDebug -PwithASAN --info
        ASAN_OPTIONS="verbosity=1 handle_segv=0 fast_unwind_on_malloc=0 detect_leaks=0" \
          LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.8 \
          ./gradlew --build-cache -x buildNativeLibDebug --info test
        ./gradlew --stop
      shell: bash
  Jar_File_Stage_build_jar:
    name: Build & Publish
    runs-on: ubuntu-20.04
    env:
      artifactsDirectory: ${{ github.workspace }}/artifacts
    needs:
      - Native_binaries_Stage_macos_x86_64
      - Native_binaries_Stage_macos_aarch64
      - Native_binaries_Stage_windows_x86_64
      - Native_binaries_Stage_linux_x86_64_glibc
      - Native_binaries_Stage_linux_x86_64_musl
      - Native_binaries_Stage_linux_aarch64_glibc
      - Native_binaries_Stage_linux_aarch64_musl
      - Native_binaries_Stage_asan
    steps:
    - name: Setup JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: recursive
        clean: true
    - run: chmod +x gradlew
      name: Make gradlew executable
    - name: Make artifacts download directories
      run: |
        cmake -E make_directory \
          ${{ env.artifactsDirectory }}/libsqreen_jni_win-x86_64 \
          ${{ env.artifactsDirectory }}/libsqreen_linux-x86_64 \
          ${{ env.artifactsDirectory }}/libsqreen_linux-aarch64 \
          ${{ env.artifactsDirectory }}/jni_linux_glibc-x86_64 \
          ${{ env.artifactsDirectory }}/jni_linux_musl-x86_64 \
          ${{ env.artifactsDirectory }}/jni_linux_glibc-aarch64 \
          ${{ env.artifactsDirectory }}/jni_linux_musl-aarch64 \
          ${{ env.artifactsDirectory }}/libsqreen_jni_macos-x86_64 \
          ${{ env.artifactsDirectory }}/libsqreen_jni_macos-aarch64
    - name: Download libsqreen_jni_win-x86_64
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_win-x86_64
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_win-x86_64
    - name: Download libddwaf_linux-x86_64
      uses: actions/download-artifact@v2
      with:
        name: libddwaf_linux-x86_64
        path: ${{ env.artifactsDirectory }}/libsqreen_linux-x86_64
    - name: Download libddwaf_linux-aarch64
      uses: actions/download-artifact@v2
      with:
        name: libddwaf_linux-aarch64
        path: ${{ env.artifactsDirectory }}/libsqreen_linux-aarch64
    - name: Download jni_linux_glibc-x86_64
      uses: actions/download-artifact@v2
      with:
        name: jni_linux_glibc-x86_64
        path: ${{ env.artifactsDirectory }}/jni_linux_glibc-x86_64
    - name: Download jni_linux_glibc-aarch64
      uses: actions/download-artifact@v2
      with:
        name: jni_linux_glibc-aarch64
        path: ${{ env.artifactsDirectory }}/jni_linux_glibc-aarch64
    - name: Download jni_linux_musl-x86_64
      uses: actions/download-artifact@v2
      with:
        name: jni_linux_musl-x86_64
        path: ${{ env.artifactsDirectory }}/jni_linux_musl-x86_64
    - name: Download jni_linux_musl-aarch64
      uses: actions/download-artifact@v2
      with:
        name: jni_linux_musl-aarch64
        path: ${{ env.artifactsDirectory }}/jni_linux_musl-aarch64
    - name: Download libsqreen_jni_macos-x86_64
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_macos-x86_64
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_macos-x86_64
    - name: Download libsqreen_jni_macos_aarch64
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_macos-aarch64
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_macos-aarch64
    - run: find .
      working-directory: ${{ env.artifactsDirectory }}
    - name: Copy the artifacts to the correct directories
      run: |
        set -ex
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_win-x86_64/* native_libs/windows/x86_64/
        LIBDDWAF_TAR="${{ env.artifactsDirectory }}/libsqreen_linux-x86_64/libddwaf-x86_64.tar.gz"
        tar -xvf "$LIBDDWAF_TAR" -C native_libs/linux/x86_64/ --strip-components=2 `tar -tf "$LIBDDWAF_TAR" | grep '\.so$'`
        tar -xvf "$LIBDDWAF_TAR" -C native_libs/linux/x86_64/ --strip-components=4 `tar -tf "$LIBDDWAF_TAR" | grep '\.debug$'`
        mv native_libs/linux/x86_64/*.debug native_libs/linux/x86_64/libddwaf.so.debug
        
        LIBDDWAF_TAR="${{ env.artifactsDirectory }}/libsqreen_linux-aarch64/libddwaf-aarch64.tar.gz"
        tar -xvf "$LIBDDWAF_TAR" -C native_libs/linux/aarch64/ --strip-components=2 `tar -tf "$LIBDDWAF_TAR" | grep '\.so$'`
        tar -xvf "$LIBDDWAF_TAR" -C native_libs/linux/aarch64/ --strip-components=4 `tar -tf "$LIBDDWAF_TAR" | grep '\.debug$'`
        mv native_libs/linux/aarch64/*.debug native_libs/linux/aarch64/libddwaf.so.debug
        
        cp ${{ env.artifactsDirectory }}/jni_linux_glibc-x86_64/* native_libs/linux/x86_64/glibc/
        cp ${{ env.artifactsDirectory }}/jni_linux_musl-x86_64/* native_libs/linux/x86_64/musl/
        
        cp ${{ env.artifactsDirectory }}/jni_linux_glibc-aarch64/* native_libs/linux/aarch64/glibc/
        cp ${{ env.artifactsDirectory }}/jni_linux_musl-aarch64/* native_libs/linux/aarch64/musl/
        
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_macos-x86_64/* native_libs/macos/x86_64/
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_macos-aarch64/* native_libs/macos/aarch64/
      shell: bash
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Build final JAR and debug symbols package
      run: ./gradlew packageDebugSymbols jar
    - name: Copy artifacts to the packages directory
      run: |
        set -ex
        mkdir -p "${{ env.tempdir }}/packages"
        cp ${{ github.workspace }}/build/libs/libsqreen-*.jar "${{ env.tempdir }}/packages"
        cp ${{ github.workspace }}/build/distributions/libsqreen-*-dbgsym.zip "${{ env.tempdir }}/packages"
      shell: bash
    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.tempdir }}/packages
        name: libsqreen_jni_jar
    - name: Publish artifacts to S3
      run: ./gradlew publish
      env:
        AWS_ACCESS_KEY_ID: AKIA5VR734GFSK4FR2PD
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: (success() && contains(github.ref, 'refs/tags/v'))
