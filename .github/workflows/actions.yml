name: Build Native Libraries
on:
  pull_request:
    branches: '*'
  push:
    branches-ignore: '*'
    tags: '*'
defaults:
  run:
    shell: bash
env:
  buildType: RelWithDebInfo
  tempdir: ${{ github.workspace }}/build
jobs:
  Coverage:
    runs-on: ubuntu-20.04
    if: "!(contains(github.ref, 'refs/tags/v'))"
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          submodules: recursive
          clean: true
      - name: Cache Gradle artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build libddwdaf
        run: |
          mkdir libddwaf/Debug
          cd libddwaf/Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          VERBOSE=1 make -j
          DESTDIR=out make install
          cd ../..
      - name: Build and test
        run: |
          ./gradlew check jacocoTestReport
      - name: Generate native coverage report
        run: |
          sudo apt-get install -y gcovr
          gcovr -f '.*src/main/c/.*' -x -d -o build/coverage.xml
      - name: Submit coverage
        uses: codecov/codecov-action@v2
        with:
          flags: helper
          verbose: true
          files: build/coverage.xml,build/reports/jacoco/test/jacocoTestReport.xml
  Native_binaries_Stage_macos_x86_64:
    name: MacOS x86_64
    runs-on: macOS-12
    env:
      generator: Unix Makefiles
      shlib_prefix: lib
      shlib_ext: dylib
      debug_ext: dylib.dwarf
      artifactsuff: macos-x86_64
      libdir: macos/x86_64
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: recursive
        clean: true
    - name: Create Build Directory for libddwaf
      run: cmake -E make_directory "${{ env.tempdir }}/buildPW"
    - name: Create Build Directory for JNI binding
      run: cmake -E make_directory "${{ env.tempdir }}/buildAG"
    - name: Create Packages Directory
      run: cmake -E make_directory ${{ env.tempdir }}/packages
    - name: Generate Build Scripts for libddwaf
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
          -DLIBDDWAF_BUILD_STATIC=0 \
          -DCMAKE_C_FLAGS="-mmacosx-version-min=11.6" \
          -DCMAKE_CXX_FLAGS="-mmacosx-version-min=11.6" \
          -DCMAKE_INSTALL_PREFIX='${{ env.tempdir }}/out' \
          -G '${{ env.generator }}' '${{ github.workspace }}/libddwaf'
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Build Binaries for libddwaf
      run: cmake --build . --verbose
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Install Binaries for libddwaf
      run: cmake --build . --target install
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Generate Build Scripts for JNI binding
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
          -DCMAKE_PREFIX_PATH='${{ env.tempdir }}/out/share/cmake/libddwaf/' \
          -DCMAKE_C_FLAGS="-mmacosx-version-min=11.6" \
          -G "${{ env.generator }}" ${{ github.workspace }}
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Build Binaries for JNI Binding
      run: cmake --build . --verbose
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Copy libddwaf binaries to packages
      run: |
        cmake -E copy ${{ env.shlib_prefix }}ddwaf.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}ddwaf.${{ env.debug_ext }} \
          ${{ env.tempdir }}/packages
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Copy libddwaf binding binaries to native_libs (testing)
      run: |
        cmake -E copy ${{ env.shlib_prefix }}ddwaf.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}ddwaf.${{ env.debug_ext }} \
          ${{ github.workspace }}/native_libs/${{ env.libdir }}
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Copy JNI binding binaries to packages
      run: |
        cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} \
          ${{ env.tempdir }}/packages
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Copy JNI binding binaries to native_libs (testing)
      run: |
        cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} \
          ${{ github.workspace }}/native_libs/${{ env.libdir }}
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Run tests on binding
      run: |
        set -ex
        cd '${{ github.workspace }}'
        export LIBDDWAF_INSTALL_PREFIX='${{ env.tempdir }}/out'
        ./gradlew --build-cache check --info -PuseReleaseBinaries
        ./gradlew --stop
      shell: bash
    - name: Save Artifacts
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.tempdir }}/packages
        name: libsqreen_jni_${{ env.artifactsuff }}
  Native_binaries_Stage_macos_aarch64:
    name: MacOS aarch64
    runs-on: macOS-12
    env:
      generator: Unix Makefiles
      shlib_prefix: lib
      shlib_ext: dylib
      debug_ext: dylib.dwarf
      artifactsuff: macos-aarch64
      libdir: macos/aarch64
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          submodules: recursive
          clean: true
      - name: Create Build Directory for libddwaf
        run: cmake -E make_directory "${{ env.tempdir }}/buildPW"
      - name: Create Build Directory for JNI binding
        run: cmake -E make_directory "${{ env.tempdir }}/buildAG"
      - name: Create Packages Directory
        run: cmake -E make_directory ${{ env.tempdir }}/packages
      - name: Generate Build Scripts for libddwaf
        run: |
          cmake -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
            -DLIBDDWAF_BUILD_STATIC=0 \
            -DCMAKE_C_FLAGS="-mmacosx-version-min=11.6" \
            -DCMAKE_CXX_FLAGS="-mmacosx-version-min=11.6" \
            -DCMAKE_INSTALL_PREFIX='${{ env.tempdir }}/out' \
            -G '${{ env.generator }}' '${{ github.workspace }}/libddwaf'
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Build Binaries for libddwaf
        run: cmake --build .
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Install Binaries for libddwaf
        run: cmake --build . --target install
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Generate Build Scripts for JNI binding
        run: |
          cmake -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
            -DCMAKE_PREFIX_PATH='${{ env.tempdir }}/out/share/cmake/libddwaf/' \
            -DCMAKE_C_FLAGS="-mmacosx-version-min=11.6" \
            -G "${{ env.generator }}" ${{ github.workspace }}
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Build Binaries for JNI Binding
        run: cmake --build .
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Copy libddwaf binaries to packages
        run: |
          cmake -E copy ${{ env.shlib_prefix }}ddwaf.${{ env.shlib_ext }} \
            ${{ env.shlib_prefix }}ddwaf.${{ env.debug_ext }} \
            ${{ env.tempdir }}/packages
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Copy libddwaf binding binaries to native_libs (testing)
        run: |
          cmake -E copy ${{ env.shlib_prefix }}ddwaf.${{ env.shlib_ext }} \
            ${{ env.shlib_prefix }}ddwaf.${{ env.debug_ext }} \
            ${{ github.workspace }}/native_libs/${{ env.libdir }}
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Copy JNI binding binaries to packages
        run: |
          cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} \
            ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} \
            ${{ env.tempdir }}/packages
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Copy JNI binding binaries to native_libs (testing)
        run: |
          cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} \
            ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} \
            ${{ github.workspace }}/native_libs/${{ env.libdir }}
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Cache Gradle artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
#      - name: Run tests on binding
#        run: |
#          set -ex
#          cd '${{ github.workspace }}'
#          export LIBDDWAF_INSTALL_PREFIX='${{ env.tempdir }}/out'
#          ./gradlew --build-cache check --info -PuseReleaseBinaries
#          ./gradlew --stop
#        shell: bash
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: libsqreen_jni_${{ env.artifactsuff }}

  Native_binaries_Stage_windows_x86_64:
    name: Windows x86_64
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    env:
      generator: NMake Makefiles
      shlib_prefix: 
      shlib_ext: dll
      debug_ext: pdb
      artifactsuff: win-x86_64
      libdir: windows/x86_64
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          submodules: recursive
          clean: true
      - uses: ilammy/msvc-dev-cmd@v1
        name: Setup x86_64 build
        with:
          toolset: 14.29
          arch: amd64
      - name: Create Build Directory for libddwaf
        run: cmake -E make_directory "${{ env.tempdir }}/buildPW"
      - name: Create Build Directory for JNI binding
        run: cmake -E make_directory "${{ env.tempdir }}/buildAG"
      - name: Create Packages Directory
        run: cmake -E make_directory ${{ env.tempdir }}/packages
      - name: Generate Build Scripts for libddwaf
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} -DLIBDDWAF_BUILD_SHARED=0 -DCMAKE_INSTALL_PREFIX="${{ env.tempdir }}/out" -G "${{ env.generator }}" "${{ github.workspace }}/libddwaf"
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Build Binaries for libddwaf
        run: cmake --build . --target libddwaf_static
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Install Binaries for libddwaf
        run: cmake --build . --target install
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Generate Build Scripts for JNI binding
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} -DCMAKE_PREFIX_PATH="${{ env.tempdir }}/out/share/cmake/libddwaf/" -G "${{ env.generator }}" "${{ github.workspace }}"
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Build Binaries for JNI Binding
        run: cmake --build .
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Copy JNI binding binaries to packages
        run: cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} ${{ env.tempdir }}\packages
        shell: cmd
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Copy JNI binding binaries to native_libs (testing)
        run: cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} ${{ github.workspace }}\native_libs\${{ env.libdir }}
        shell: cmd
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Cache Gradle artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run tests on binding
        run: |
          set -ex
          cd '${{ github.workspace }}'
          export LIBDDWAF_INSTALL_PREFIX='${{ env.tempdir }}/out'
          ./gradlew --build-cache check --info -PuseReleaseBinaries
          ./gradlew --stop
        shell: bash
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: libsqreen_jni_${{ env.artifactsuff }}

  Native_binaries_Stage_libddwaf_linux_x86_64:
    name: Linux x86_64 (semi-static libddwaf.so)
    runs-on: ubuntu-20.04
    env:
      dockerfile: ci/alpine-libc++-static/x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          clean: true
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: Create packages directory
        run: mkdir -p ${{ env.tempdir }}/packages
      - name: Build semi-statically compiled dynamic library
        run: docker buildx build -f ${{ env.dockerfile  }}/Dockerfile --progress=plain -o ${{ env.tempdir }}/packages .
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: libddwaf_linux-x86_64

  Native_binaries_Stage_libddwaf_linux_aarch64:
    name: Linux aarch64 (semi-static libddwaf.so)
    runs-on: self-hosted
    env:
      dockerfile: ci/alpine-libc++-static/aarch64
    steps:
      - name: Fix permissions
        run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/AgentJavaNative/
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          clean: true
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: Create packages directory
        run: mkdir -p ${{ env.tempdir }}/packages
      - name: Build semi-statically compiled dynamic library
        run: docker buildx build -f ${{ env.dockerfile  }}/Dockerfile --progress=plain -o ${{ env.tempdir }}/packages .
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: libddwaf_linux-aarch64

  Native_binaries_Stage_linux_x86_64_glibc:
    name: Linux x86_64 (glibc)
    runs-on: ubuntu-20.04
    needs:
      - Native_binaries_Stage_libddwaf_linux_x86_64
    env:
      dockerfile: ci/manylinux/x86_64
      artifactsuff: linux_glibc-x86_64
      libdir: linux/x86_64/glibc
      artifactsDirectory: ${{ github.workspace }}/artifacts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          clean: true
      - name: Create artifacts directory
        run: mkdir -p ${{ env.artifactsDirectory }}
      - name: Download libddwaf artifact
        uses: actions/download-artifact@v2
        with:
          name: libddwaf_linux-x86_64
          path: ${{ env.artifactsDirectory }}
      - name: Build docker linux image
        run: docker build ${{ env.dockerfile  }} -t linux_cmake
      - name: Clean previous docker container
        run: docker rm -f pwaf_java_build || true
      - name: Build and test JNI binding
        run: |
          docker run --name pwaf_java_build -v $(pwd):${{ github.workspace }} linux_cmake bash -e -c 'export VERBOSE=1;
            export LIBDDWAF_INSTALL_PREFIX=/;
            tar --strip-components=1 -xf ${{ env.artifactsDirectory }}/libddwaf-x86_64.tar.gz -C /usr/local/ &&
            mkdir buildAG && cd buildAG &&
            cmake ${{ github.workspace }} -DCMAKE_BUILD_TYPE=${{ env.buildType }} &&
            make -j &&
            cp -v /usr/local/lib/libddwaf.so ${{ github.workspace }}/native_libs/linux/x86_64 &&
            cp -v *.so ${{ github.workspace }}/native_libs/${{ env.libdir }} &&
            cd ${{ github.workspace }} &&
            ./gradlew check --info -PuseReleaseBinaries'
        shell: bash
      - name: Copy binaries and debug symbols
        run: |
          sudo chown -R $(whoami) "${{ env.tempdir }}"
          mkdir ${{ env.tempdir }}/packages
          cd ${{ env.tempdir }}/packages
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so .
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so.debug .
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_linux_x86_64_musl:
    name: Linux x86_64 (musl)
    runs-on: ubuntu-20.04
    needs:
      - Native_binaries_Stage_libddwaf_linux_x86_64
    env:
      dockerfile: ci/alpine
      artifactsuff: linux_musl-x86_64
      libdir: linux/x86_64/musl
      artifactsDirectory: ${{ github.workspace }}/artifacts
    steps: # identical to glibc
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          clean: true
      - name: Create artifacts directory
        run: mkdir -p ${{ env.artifactsDirectory }}
      - name: Download libddwaf artifact
        uses: actions/download-artifact@v2
        with:
          name: libddwaf_linux-x86_64
          path: ${{ env.artifactsDirectory }}
      - name: Build docker linux image
        run: docker build ${{ env.dockerfile  }} -t linux_cmake
      - name: Clean previous docker container
        run: docker rm -f pwaf_java_build || true
      - name: Build and test with release binaries
        run: |
          docker run --name pwaf_java_build -v $(pwd):${{ github.workspace }} linux_cmake bash -e -c 'export VERBOSE=1;
            export LIBDDWAF_INSTALL_PREFIX=/;
            tar --strip-components=1 -xvf ${{ env.artifactsDirectory }}/libddwaf-x86_64.tar.gz -C /usr/local/ &&
            mkdir buildAG && cd buildAG &&
            cmake ${{ github.workspace }} -DCMAKE_BUILD_TYPE=${{ env.buildType }} &&
            make -j &&
            cp -v /usr/local/lib/libddwaf.so ${{ github.workspace }}/native_libs/linux/x86_64 &&
            cp -v *.so ${{ github.workspace }}/native_libs/${{ env.libdir }} &&
            cd ${{ github.workspace }} &&
            ./gradlew check --info -PuseReleaseBinaries'
        shell: bash
      - name: Copy binaries and debug symbols
        run: |
          sudo chown -R $(whoami) ${{ env.tempdir }}
          mkdir ${{ env.tempdir }}/packages
          cd ${{ env.tempdir }}/packages
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so .
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so.debug .
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_linux_aarch64_glibc:
    name: Linux aarch64 (glibc)
    runs-on: self-hosted
    needs:
      - Native_binaries_Stage_libddwaf_linux_aarch64
    env:
      dockerfile: ci/manylinux/aarch64
      artifactsuff: linux_glibc-aarch64
      libdir: linux/aarch64/glibc
      artifactsDirectory: ${{ github.workspace }}/artifacts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          clean: true
      - name: Create artifacts directory
        run: mkdir -p ${{ env.artifactsDirectory }}
      - name: Download libddwaf artifact
        uses: actions/download-artifact@v2
        with:
          name: libddwaf_linux-aarch64
          path: ${{ env.artifactsDirectory }}
      - name: Build docker linux image
        run: docker build ${{ env.dockerfile  }} -t linux_cmake_aarch64
      - name: Clean previous docker container
        run: docker rm -f pwaf_java_build || true
      - name: Build and test JNI binding
        run: |
          docker run --name pwaf_java_build -v $(pwd):${{ github.workspace }} linux_cmake_aarch64 bash -e -c 'export VERBOSE=1;
            export LIBDDWAF_INSTALL_PREFIX=/;
            git config --global --add safe.directory /home/ubuntu/actions-runner/_work/AgentJavaNative/AgentJavaNative &&
            tar --strip-components=1 -xf ${{ env.artifactsDirectory }}/libddwaf-aarch64.tar.gz -C /usr/local/ &&
            mkdir buildAG && cd buildAG &&
            cmake ${{ github.workspace }} -DCMAKE_BUILD_TYPE=${{ env.buildType }} &&
            make -j &&
            cp -v /usr/local/lib/libddwaf.so ${{ github.workspace }}/native_libs/linux/aarch64 &&
            cp -v *.so /usr/local/lib/libddwaf.so ${{ github.workspace }}/native_libs/${{ env.libdir }} &&
            cd ${{ github.workspace }} &&
            ./gradlew check --info -PuseReleaseBinaries'
        shell: bash
      - name: Copy binaries and debug symbols
        run: |
          sudo chown -R $(whoami) "${{ env.tempdir }}"
          mkdir ${{ env.tempdir }}/packages
          cd ${{ env.tempdir }}/packages
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so .
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so.debug .
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: jni_${{ env.artifactsuff }}
      - name: Cleanup
        run: sudo git clean -ffdx

  Native_binaries_Stage_linux_aarch64_musl:
    name: Linux aarch64 (musl)
    runs-on: self-hosted
    needs:
      #- Native_binaries_Stage_libddwaf_linux_aarch64
      - Native_binaries_Stage_linux_aarch64_glibc
    env:
      dockerfile: ci/alpine
      artifactsuff: linux_musl-aarch64
      libdir: linux/aarch64/musl
      artifactsDirectory: ${{ github.workspace }}/artifacts
    steps: # identical to glibc
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          clean: true
      - name: Create artifacts directory
        run: mkdir -p ${{ env.artifactsDirectory }}
      - name: Download libddwaf artifact
        uses: actions/download-artifact@v2
        with:
          name: libddwaf_linux-aarch64
          path: ${{ env.artifactsDirectory }}
      - name: Build docker linux image
        run: docker build ${{ env.dockerfile  }} -t linux_cmake
      - name: Clean previous docker container
        run: docker rm -f pwaf_java_build || true
      - name: Build and test with release binaries
        run: |
          docker run --name pwaf_java_build -v $(pwd):${{ github.workspace }} linux_cmake bash -e -c 'export VERBOSE=1;
            export LIBDDWAF_INSTALL_PREFIX=/;
            tar --strip-components=1 -xvf ${{ env.artifactsDirectory }}/libddwaf-aarch64.tar.gz -C /usr/local/ &&
            mkdir buildAG && cd buildAG &&
            cmake ${{ github.workspace }} -DCMAKE_BUILD_TYPE=${{ env.buildType }} &&
            make -j &&
            cp -v /usr/local/lib/libddwaf.so ${{ github.workspace }}/native_libs/linux/aarch64 &&
            cp -v *.so ${{ github.workspace }}/native_libs/${{ env.libdir }} &&
            cd ${{ github.workspace }} &&
            ./gradlew check --info -PuseReleaseBinaries'
        shell: bash
      - name: Copy binaries and debug symbols
        run: |
          sudo chown -R $(whoami) ${{ env.tempdir }}
          mkdir ${{ env.tempdir }}/packages
          cd ${{ env.tempdir }}/packages
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so .
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so.debug .
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: jni_${{ env.artifactsuff }}
      - name: Cleanup
        run: sudo git clean -ffdx

  Native_binaries_Stage_asan:
    name: ASAN/static analyzer on Linux
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout project
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install GCC 9 and clang 8
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main | sudo tee -a /etc/apt/sources.list
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y libc++-dev libc++abi-dev libc++abi1 libstdc++-9-dev gcc-9 g++-9 \
          clang-8 clang-tools-8 ruby
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-9 100
        sudo update-alternatives --set cc /usr/bin/gcc-9
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-9 100
        sudo update-alternatives --set c++ /usr/bin/g++-9
      shell: bash
    - name: Build libddwaf
      run: |
        set -ex
        cd libddwaf
        mkdir Debug && cd Debug
        cmake .. -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_C_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_MODULE_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak"
        VERBOSE=1 make -j
        DESTDIR=out make install
      shell: bash
    - name: Run static analyzer
      run: |
        ci/static_analysis
      shell: bash
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Run Binding Tests
      run: |
        set -ex
        VERBOSE=1 ./gradlew --build-cache buildNativeLibDebug -PwithASAN --info
        ASAN_OPTIONS="verbosity=1 handle_segv=0 fast_unwind_on_malloc=0 detect_leaks=0" \
          LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.5 \
          ./gradlew --build-cache -x buildNativeLibDebug --info test
        ./gradlew --stop
      shell: bash
  Jar_File_Stage_build_jar:
    name: Build & Publish
    runs-on: ubuntu-20.04
    env:
      artifactsDirectory: ${{ github.workspace }}/artifacts
    needs:
      - Native_binaries_Stage_macos_x86_64
      - Native_binaries_Stage_macos_aarch64
      - Native_binaries_Stage_windows_x86_64
      - Native_binaries_Stage_linux_x86_64_glibc
      - Native_binaries_Stage_linux_x86_64_musl
      - Native_binaries_Stage_linux_aarch64_glibc
      - Native_binaries_Stage_linux_aarch64_musl
      - Native_binaries_Stage_asan
      - Native_binaries_Stage_libddwaf_linux_x86_64
      - Native_binaries_Stage_libddwaf_linux_aarch64
    steps:
    - name: Setup JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: recursive
        clean: true
    - run: chmod +x gradlew
      name: Make gradlew executable
    - name: Make artifacts download directories
      run: |
        cmake -E make_directory \
          ${{ env.artifactsDirectory }}/libsqreen_jni_win-x86_64 \
          ${{ env.artifactsDirectory }}/libsqreen_linux-x86_64 \
          ${{ env.artifactsDirectory }}/libsqreen_linux-aarch64 \
          ${{ env.artifactsDirectory }}/jni_linux_glibc-x86_64 \
          ${{ env.artifactsDirectory }}/jni_linux_musl-x86_64 \
          ${{ env.artifactsDirectory }}/jni_linux_glibc-aarch64 \
          ${{ env.artifactsDirectory }}/jni_linux_musl-aarch64 \
          ${{ env.artifactsDirectory }}/libsqreen_jni_macos-x86_64 \
          ${{ env.artifactsDirectory }}/libsqreen_jni_macos-aarch64
    - name: Download libsqreen_jni_win-x86_64
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_win-x86_64
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_win-x86_64
    - name: Download libddwaf_linux-x86_64
      uses: actions/download-artifact@v2
      with:
        name: libddwaf_linux-x86_64
        path: ${{ env.artifactsDirectory }}/libsqreen_linux-x86_64
    - name: Download libddwaf_linux-aarch64
      uses: actions/download-artifact@v2
      with:
        name: libddwaf_linux-aarch64
        path: ${{ env.artifactsDirectory }}/libsqreen_linux-aarch64
    - name: Download jni_linux_glibc-x86_64
      uses: actions/download-artifact@v2
      with:
        name: jni_linux_glibc-x86_64
        path: ${{ env.artifactsDirectory }}/jni_linux_glibc-x86_64
    - name: Download jni_linux_glibc-aarch64
      uses: actions/download-artifact@v2
      with:
        name: jni_linux_glibc-aarch64
        path: ${{ env.artifactsDirectory }}/jni_linux_glibc-aarch64
    - name: Download jni_linux_musl-x86_64
      uses: actions/download-artifact@v2
      with:
        name: jni_linux_musl-x86_64
        path: ${{ env.artifactsDirectory }}/jni_linux_musl-x86_64
    - name: Download jni_linux_musl-aarch64
      uses: actions/download-artifact@v2
      with:
        name: jni_linux_musl-aarch64
        path: ${{ env.artifactsDirectory }}/jni_linux_musl-aarch64
    - name: Download libsqreen_jni_macos-x86_64
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_macos-x86_64
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_macos-x86_64
    - name: Download libsqreen_jni_macos_aarch64
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_macos-aarch64
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_macos-aarch64
    - run: find .
      working-directory: ${{ env.artifactsDirectory }}
    - name: Copy the artifacts to the correct directories
      run: |
        set -ex
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_win-x86_64/* native_libs/windows/x86_64/
        LIBDDWAF_TAR="${{ env.artifactsDirectory }}/libsqreen_linux-x86_64/libddwaf-x86_64.tar.gz"
        tar -xvf "$LIBDDWAF_TAR" -C native_libs/linux/x86_64/ --strip-components=2 `tar -tf "$LIBDDWAF_TAR" | grep '\.so$'`
        tar -xvf "$LIBDDWAF_TAR" -C native_libs/linux/x86_64/ --strip-components=4 `tar -tf "$LIBDDWAF_TAR" | grep '\.debug$'`
        mv native_libs/linux/x86_64/*.debug native_libs/linux/x86_64/libddwaf.so.debug
        
        LIBDDWAF_TAR="${{ env.artifactsDirectory }}/libsqreen_linux-aarch64/libddwaf-aarch64.tar.gz"
        tar -xvf "$LIBDDWAF_TAR" -C native_libs/linux/aarch64/ --strip-components=2 `tar -tf "$LIBDDWAF_TAR" | grep '\.so$'`
        tar -xvf "$LIBDDWAF_TAR" -C native_libs/linux/aarch64/ --strip-components=4 `tar -tf "$LIBDDWAF_TAR" | grep '\.debug$'`
        mv native_libs/linux/aarch64/*.debug native_libs/linux/aarch64/libddwaf.so.debug
        
        cp ${{ env.artifactsDirectory }}/jni_linux_glibc-x86_64/* native_libs/linux/x86_64/glibc/
        cp ${{ env.artifactsDirectory }}/jni_linux_musl-x86_64/* native_libs/linux/x86_64/musl/
        
        cp ${{ env.artifactsDirectory }}/jni_linux_glibc-aarch64/* native_libs/linux/aarch64/glibc/
        cp ${{ env.artifactsDirectory }}/jni_linux_musl-aarch64/* native_libs/linux/aarch64/musl/
        
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_macos-x86_64/* native_libs/macos/x86_64/
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_macos-aarch64/* native_libs/macos/aarch64/
      shell: bash
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Build final JAR and debug symbols package
      run: ./gradlew packageDebugSymbols jar
    - name: Copy artifacts to the packages directory
      run: |
        set -ex
        mkdir -p "${{ env.tempdir }}/packages"
        cp ${{ github.workspace }}/build/libs/libsqreen-*.jar "${{ env.tempdir }}/packages"
        cp ${{ github.workspace }}/build/distributions/libsqreen-*-dbgsym.zip "${{ env.tempdir }}/packages"
      shell: bash
    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.tempdir }}/packages
        name: libsqreen_jni_jar
    - name: Publish artifacts to S3
      run: ./gradlew publish
      env:
        AWS_ACCESS_KEY_ID: AKIA5VR734GFSK4FR2PD
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: (success() && contains(github.ref, 'refs/tags/v'))
