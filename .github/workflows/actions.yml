name: Build Native Libraries
on:
  pull_request:
    branches: master
  push:
    branches-ignore: '*'
    tags: '*'
defaults:
  run:
    shell: bash
env:
  buildType: RelWithDebInfo
  tempdir: ${{ github.workspace }}/build
jobs:
  Native_binaries_Stage_macos:
    name: Mac OS X
    runs-on: macOS-10.14
    env:
      generator: Unix Makefiles
      shlib_prefix: lib
      shlib_ext: dylib
      debug_ext: dylib.dwarf
      artifactsuff: macos
      libdir: osx_64
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: recursive
        token: ${{ secrets.GH_TOKEN }}
        clean: true
    - name: Create Build Directory for libddwaf
      run: cmake -E make_directory "${{ env.tempdir }}/buildPW"
    - name: Create Build Directory for JNI binding
      run: cmake -E make_directory "${{ env.tempdir }}/buildAG"
    - name: Create Packages Directory
      run: cmake -E make_directory ${{ env.tempdir }}/packages
    - name: Generate Build Scripts for libddwaf
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
          -DCMAKE_INSTALL_PREFIX='${{ env.tempdir }}/out' \
          -G '${{ env.generator }}' '${{ github.workspace }}/libddwaf'
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Build Binaries for libddwaf
      run: cmake --build .
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Install Binaries for libddwaf
      run: cmake --build . --target install
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Generate Build Scripts for JNI binding
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
          -DCMAKE_PREFIX_PATH='${{ env.tempdir }}/out/share/cmake/libddwaf/' \
          -G "${{ env.generator }}" ${{ github.workspace }}
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Build Binaries for JNI Binding
      run: cmake --build .
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Copy libddwaf binaries to packages
      run: |
        cmake -E copy ${{ env.shlib_prefix }}ddwaf.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}ddwaf.${{ env.debug_ext }} \
          ${{ env.tempdir }}/packages
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Copy libddwaf binding binaries to native_libs (testing)
      run: |
        cmake -E copy ${{ env.shlib_prefix }}ddwaf.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}ddwaf.${{ env.debug_ext }} \
          ${{ github.workspace }}/native_libs/${{ env.libdir }}
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Copy JNI binding binaries to packages
      run: |
        cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} \
          ${{ env.tempdir }}/packages
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Copy JNI binding binaries to native_libs (testing)
      run: |
        cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} \
          ${{ github.workspace }}/native_libs/${{ env.libdir }}
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Run tests on binding
      run: |
        set -ex
        cd '${{ github.workspace }}'
        export LIBDDWAF_INSTALL_PREFIX='${{ env.tempdir }}/out'
        ./gradlew --build-cache check --info -PuseReleaseBinaries
        ./gradlew --stop
      shell: bash
    - name: Save Artifacts
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.tempdir }}/packages
        name: libsqreen_jni_${{ env.artifactsuff }}
  Native_binaries_Stage_windows_amd64:
    name: Windows amd64
    runs-on: vs2017-win2016
    defaults:
      run:
        shell: cmd
    env:
      generator: NMake Makefiles
      shlib_prefix: 
      shlib_ext: dll
      debug_ext: pdb
      artifactsuff: win_amd64
      libdir: windows_64
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}
          clean: true
      - uses: ilammy/msvc-dev-cmd@v1
        name: Setup amd64 build
        with:
          toolset: 14.16
          arch: amd64
      - name: Create Build Directory for libddwaf
        run: cmake -E make_directory "${{ env.tempdir }}/buildPW"
      - name: Create Build Directory for JNI binding
        run: cmake -E make_directory "${{ env.tempdir }}/buildAG"
      - name: Create Packages Directory
        run: cmake -E make_directory ${{ env.tempdir }}/packages
      - name: Generate Build Scripts for libddwaf
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} -DLIBDDWAF_BUILD_SHARED=0 -DCMAKE_INSTALL_PREFIX="${{ env.tempdir }}/out" -G "${{ env.generator }}" "${{ github.workspace }}/libddwaf"
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Build Binaries for libddwaf
        run: cmake --build . --target libddwaf_static
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Install Binaries for libddwaf
        run: cmake --build . --target install
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Generate Build Scripts for JNI binding
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} -DCMAKE_PREFIX_PATH="${{ env.tempdir }}/out/share/cmake/libddwaf/" -G "${{ env.generator }}" "${{ github.workspace }}"
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Build Binaries for JNI Binding
        run: cmake --build .
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Copy JNI binding binaries to packages
        run: cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} ${{ env.tempdir }}\packages
        shell: cmd
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Copy JNI binding binaries to native_libs (testing)
        run: cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} ${{ github.workspace }}\native_libs\${{ env.libdir }}
        shell: cmd
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Cache Gradle artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run tests on binding
        run: |
          set -ex
          cd '${{ github.workspace }}'
          export LIBDDWAF_INSTALL_PREFIX='${{ env.tempdir }}/out'
          ./gradlew --build-cache check --info -PuseReleaseBinaries
          ./gradlew --stop
        shell: bash
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: libsqreen_jni_${{ env.artifactsuff }}
  Native_binaries_Stage_linux_amd64_glibc:
    name: Linux amd64 (glibc)
    runs-on: ubuntu-18.04
    env:
      dockerfile: ci/manylinux
      artifactsuff: linux_glibc
      libdir: linux_64_glibc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}
          clean: true
      - name: Build docker linux image
        run: docker build ${{ env.dockerfile  }} -t linux_cmake
      - name: Clean previous docker container
        run: docker rm -f pwaf_java_build || true
      - name: Build and test with release binaries
        run: |
          docker run --name pwaf_java_build -v $(pwd):${{ github.workspace }} linux_cmake bash -e -c 'export VERBOSE=1;
            export LIBDDWAF_INSTALL_PREFIX=/;
            mkdir buildPW && cd buildPW &&
            cmake ${{ github.workspace }}/libddwaf -DCMAKE_BUILD_TYPE=${{ env.buildType }} &&
            make -j && make install &&
            mkdir ../buildAG && cd ../buildAG &&
            cmake ${{ github.workspace }} -DCMAKE_BUILD_TYPE=${{ env.buildType }} &&
            make -j &&
            cp {.,../buildPW}/*.so* ${{ github.workspace }}/native_libs/${{ env.libdir }} &&
            cd ${{ github.workspace }} &&
            ./gradlew check --info -PuseReleaseBinaries'
        shell: bash
      - name: Copy binaries and debug symbols
        run: |
          sudo chown -R $(whoami) "${{ env.tempdir }}"
          mkdir ${{ env.tempdir }}/packages
          cd ${{ env.tempdir }}/packages
          docker cp pwaf_java_build:/buildPW/libddwaf.so .
          docker cp pwaf_java_build:/buildPW/libddwaf.so.debug .
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so .
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so.debug .
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: libsqreen_jni_${{ env.artifactsuff }}
  Native_binaries_Stage_linux_amd64_musl:
    name: Linux amd64 (musl)
    runs-on: ubuntu-18.04
    env:
      dockerfile: ci/alpine
      artifactsuff: linux_musl
      libdir: linux_64_musl
    steps: # identical to glibc
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}
          clean: true
      - name: Build docker linux image
        run: docker build ${{ env.dockerfile  }} -t linux_cmake
      - name: Clean previous docker container
        run: docker rm -f pwaf_java_build || true
      - name: Build and test with release binaries
        run: |
          docker run --name pwaf_java_build -v $(pwd):${{ github.workspace }} linux_cmake bash -e -c 'export VERBOSE=1;
            export LIBDDWAF_INSTALL_PREFIX=/;
            mkdir buildPW && cd buildPW &&
            cmake ${{ github.workspace }}/libddwaf -DCMAKE_BUILD_TYPE=${{ env.buildType }} &&
            make -j && make install &&
            mkdir ../buildAG && cd ../buildAG &&
            cmake ${{ github.workspace }} -DCMAKE_BUILD_TYPE=${{ env.buildType }} &&
            make -j &&
            cp {.,../buildPW}/*.so* ${{ github.workspace }}/native_libs/${{ env.libdir }} &&
            cd ${{ github.workspace }} &&
            ./gradlew check --info -PuseReleaseBinaries'
        shell: bash
      - name: Copy binaries and debug symbols
        run: |
          sudo chown -R $(whoami) ${{ env.tempdir }}
          mkdir ${{ env.tempdir }}/packages
          cd ${{ env.tempdir }}/packages
          docker cp pwaf_java_build:/buildPW/libddwaf.so .
          docker cp pwaf_java_build:/buildPW/libddwaf.so.debug .
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so .
          docker cp pwaf_java_build:/buildAG/libsqreen_jni.so.debug .
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.tempdir }}/packages
          name: libsqreen_jni_${{ env.artifactsuff }}
  Native_binaries_Stage_asan:
    name: ASAN/static analyzer on Linux
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout project
      uses: actions/checkout@v2
      with:
        submodules: recursive
        token: ${{ secrets.GH_TOKEN }}
    - name: Install GCC 9 and clang 8
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main | sudo tee -a /etc/apt/sources.list
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y libc++-dev libc++abi-dev libc++abi1 libstdc++-9-dev gcc-9 g++-9 \
          clang-8 clang-tools-8 ruby
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-9 100
        sudo update-alternatives --set cc /usr/bin/gcc-9
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-9 100
        sudo update-alternatives --set c++ /usr/bin/g++-9
      shell: bash
    - name: Build libddwaf
      run: |
        set -ex
        cd libddwaf
        mkdir Debug && cd Debug
        cmake .. -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=leak" \
          -DCMAKE_C_FLAGS="-fsanitize=address -fsanitize=leak" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address -fsanitize=leak" \
          -DCMAKE_MODULE_LINKER_FLAGS="-fsanitize=address -fsanitize=leak"
        VERBOSE=1 make -j
        DESTDIR=out make install
      shell: bash
    - name: Run static analyzer
      run: |
        ci/static_analysis
      shell: bash
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Run Binding Tests
      run: |
        set -ex
        VERBOSE=1 ./gradlew --build-cache buildNativeLibDebug -PwithASAN --info
        ASAN_OPTIONS="verbosity=1 fast_unwind_on_malloc=0 detect_leaks=0" \
          LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.5 \
          ./gradlew --build-cache --info test
        ./gradlew --stop
      shell: bash
  Jar_File_Stage_build_jar:
    name: Build & Publish
    runs-on: ubuntu-18.04
    env:
      artifactsDirectory: ${{ github.workspace }}/artifacts
    needs:
      - Native_binaries_Stage_macos
      - Native_binaries_Stage_windows_amd64
      - Native_binaries_Stage_linux_amd64_glibc
      - Native_binaries_Stage_linux_amd64_musl
      - Native_binaries_Stage_asan
    steps:
    - name: Setup JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: recursive
        token: ${{ secrets.GH_TOKEN }}
        clean: true
    - run: chmod +x gradlew
      name: Make gradlew executable
    - name: Make artifacts download directories
      run: |
        cmake -E make_directory \
          ${{ env.artifactsDirectory }}/libsqreen_jni_win_amd64 \
          ${{ env.artifactsDirectory }}/libsqreen_jni_linux_glibc \
          ${{ env.artifactsDirectory }}/libsqreen_jni_linux_musl \
          ${{ env.artifactsDirectory }}/libsqreen_jni_macos
    - name: Download libsqreen_jni_win_amd64
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_win_amd64
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_win_amd64
    - name: Download libsqreen_jni_linux_glibc
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_linux_glibc
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_linux_glibc
    - name: Download libsqreen_jni_linux_musl
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_linux_musl
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_linux_musl
    - name: Download libsqreen_jni_macos
      uses: actions/download-artifact@v2
      with:
        name: libsqreen_jni_macos
        path: ${{ env.artifactsDirectory }}/libsqreen_jni_macos
    - run: find .
      working-directory: ${{ env.artifactsDirectory }}
    - name: Copy the artifacts to the correct directories
      run: |
        set -ex
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_win_amd64/* native_libs/windows_64/
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_linux_glibc/* native_libs/linux_64_glibc/
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_linux_musl/* native_libs/linux_64_musl/
        cp ${{ env.artifactsDirectory }}/libsqreen_jni_macos/* native_libs/osx_64/
      shell: bash
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Build final JAR and debug symbols package
      run: ./gradlew packageDebugSymbols jar
    - name: Copy artifacts to the packages directory
      run: |
        set -ex
        mkdir -p "${{ env.tempdir }}/packages"
        cp ${{ github.workspace }}/build/libs/libsqreen-*.jar "${{ env.tempdir }}/packages"
        cp ${{ github.workspace }}/build/distributions/libsqreen-*-dbgsym.zip "${{ env.tempdir }}/packages"
      shell: bash
    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.tempdir }}/packages
        name: libsqreen_jni_jar
    - name: Publish artifacts to S3
      run: ./gradlew publish
      env:
        AWS_ACCESS_KEY_ID: AKIA5VR734GFSK4FR2PD
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: (success() && contains(github.ref, 'refs/tags/v'))
