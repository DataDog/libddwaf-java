name: Build Native Libraries
on:
  pull_request:
  push:
    branches: [ master ]
    tags: '*'
defaults:
  run:
    shell: bash
env:
  buildType: RelWithDebInfo
  tempdir: ${{ github.workspace }}/build
jobs:
  Coverage:
    runs-on: ubuntu-22.04
    if: "!(contains(github.ref, 'refs/tags/v'))"
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          submodules: recursive
          clean: true
      - name: Cache Gradle artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build libddwdaf
        run: |
          mkdir libddwaf/Debug
          cd libddwaf/Debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          VERBOSE=1 make -j
          DESTDIR=out make install
          cd ../..
      - name: Build and test
        run: |
          ./gradlew check jacocoTestReport
      - name: Generate native coverage report
        run: |
          sudo apt-get install -y gcovr
          gcovr -f '.*src/main/c/.*' -x -d -o build/coverage.xml
      - name: Submit coverage
        uses: codecov/codecov-action@v2
        with:
          flags: helper
          verbose: true
          files: build/coverage.xml,build/reports/jacoco/test/jacocoTestReport.xml
  Native_binaries_Stage_macos_x86_64:
    name: MacOS x86_64
    runs-on: macOS-12
    env:
      generator: Unix Makefiles
      shlib_prefix: lib
      shlib_ext: dylib
      debug_ext: dylib.dwarf
      artifactsuff: macos-x86_64
      libdir: macos/x86_64
    steps:
    - uses: actions/checkout@v4
      name: Checkout
      with:
        submodules: recursive
        clean: true
    - name: Create Build Directory for libddwaf
      run: cmake -E make_directory "${{ env.tempdir }}/buildPW"
    - name: Create Build Directory for JNI binding
      run: cmake -E make_directory "${{ env.tempdir }}/buildAG"
    - name: Generate Build Scripts for libddwaf
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
          -DLIBDDWAF_BUILD_STATIC=0 \
          -DCMAKE_C_FLAGS="-mmacosx-version-min=11.6 -fno-omit-frame-pointer" \
          -DCMAKE_CXX_FLAGS="-mmacosx-version-min=11.6 -fno-omit-frame-pointer" \
          -DCMAKE_INSTALL_PREFIX='${{ env.tempdir }}/out' \
          -G '${{ env.generator }}' '${{ github.workspace }}/libddwaf'
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Build Binaries for libddwaf
      run: cmake --build . --verbose
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Install Binaries for libddwaf
      run: cmake --build . --target install
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Generate Build Scripts for JNI binding
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
          -DCMAKE_PREFIX_PATH='${{ env.tempdir }}/out/share/cmake/libddwaf/' \
          -DCMAKE_C_FLAGS="-mmacosx-version-min=11.6 -fno-omit-frame-pointer" \
          -G "${{ env.generator }}" ${{ github.workspace }}
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Build Binaries for JNI Binding
      run: cmake --build . --verbose
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Copy libddwaf binaries to native_libs
      run: |
        cmake -E copy ${{ env.shlib_prefix }}ddwaf.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}ddwaf.${{ env.debug_ext }} \
          ${{ github.workspace }}/native_libs/${{ env.libdir }}
      working-directory: ${{ env.tempdir }}/buildPW
    - name: Copy JNI binding binaries to native_libs
      run: |
        cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} \
          ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} \
          ${{ github.workspace }}/native_libs/${{ env.libdir }}
      working-directory: ${{ env.tempdir }}/buildAG
    - name: Save Artifacts
      uses: actions/upload-artifact@v4
      with:
        path: native_libs
        name: libsqreen_jni_${{ env.artifactsuff }}
  Native_binaries_Stage_macos_aarch64:
    name: MacOS aarch64
    runs-on: macOS-12
    env:
      generator: Unix Makefiles
      shlib_prefix: lib
      shlib_ext: dylib
      debug_ext: dylib.dwarf
      artifactsuff: macos-aarch64
      libdir: macos/aarch64
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          submodules: recursive
          clean: true
      - name: Create Build Directory for libddwaf
        run: cmake -E make_directory "${{ env.tempdir }}/buildPW"
      - name: Create Build Directory for JNI binding
        run: cmake -E make_directory "${{ env.tempdir }}/buildAG"
      - name: Generate Build Scripts for libddwaf
        run: |
          cmake -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
            -DLIBDDWAF_BUILD_STATIC=0 \
            -DCMAKE_C_FLAGS="-mmacosx-version-min=11.6 -fno-omit-frame-pointer" \
            -DCMAKE_CXX_FLAGS="-mmacosx-version-min=11.6 -fno-omit-frame-pointer" \
            -DCMAKE_INSTALL_PREFIX='${{ env.tempdir }}/out' \
            -G '${{ env.generator }}' '${{ github.workspace }}/libddwaf'
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Build Binaries for libddwaf
        run: cmake --build .
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Install Binaries for libddwaf
        run: cmake --build . --target install
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Generate Build Scripts for JNI binding
        run: |
          cmake -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_BUILD_TYPE=${{ env.buildType }} \
            -DCMAKE_PREFIX_PATH='${{ env.tempdir }}/out/share/cmake/libddwaf/' \
            -DCMAKE_C_FLAGS="-mmacosx-version-min=11.6 -fno-omit-frame-pointer" \
            -G "${{ env.generator }}" ${{ github.workspace }}
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Build Binaries for JNI Binding
        run: cmake --build .
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Copy libddwaf binaries to native_libs
        run: |
          cmake -E copy ${{ env.shlib_prefix }}ddwaf.${{ env.shlib_ext }} \
            ${{ env.shlib_prefix }}ddwaf.${{ env.debug_ext }} \
            ${{ github.workspace }}/native_libs/${{ env.libdir }}
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Copy JNI binding binaries to native_libs
        run: |
          cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} \
            ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} \
            ${{ github.workspace }}/native_libs/${{ env.libdir }}
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: native_libs
          name: libsqreen_jni_${{ env.artifactsuff }}

  Native_binaries_Stage_windows_x86_64:
    name: Windows x86_64
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    env:
      generator: NMake Makefiles
      shlib_prefix: 
      shlib_ext: dll
      debug_ext: pdb
      artifactsuff: win-x86_64
      libdir: windows/x86_64
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          submodules: recursive
          clean: true
      - uses: ilammy/msvc-dev-cmd@v1
        name: Setup x86_64 build
        with:
          toolset: 14.29
          arch: amd64
      - name: Create Build Directory for libddwaf
        run: cmake -E make_directory "${{ env.tempdir }}/buildPW"
      - name: Create Build Directory for JNI binding
        run: cmake -E make_directory "${{ env.tempdir }}/buildAG"
      - name: Generate Build Scripts for libddwaf
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} -DLIBDDWAF_BUILD_SHARED=0 -DCMAKE_INSTALL_PREFIX="${{ env.tempdir }}/out" -G "${{ env.generator }}" "${{ github.workspace }}/libddwaf"
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Build Binaries for libddwaf
        run: cmake --build . --target libddwaf_static
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Install Binaries for libddwaf
        run: cmake --build . --target install
        working-directory: ${{ env.tempdir }}/buildPW
      - name: Generate Build Scripts for JNI binding
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.buildType }} -DCMAKE_PREFIX_PATH="${{ env.tempdir }}/out/share/cmake/libddwaf/" -G "${{ env.generator }}" "${{ github.workspace }}"
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Build Binaries for JNI Binding
        run: cmake --build .
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Copy JNI binding binaries to native_libs
        run: cmake -E copy ${{ env.shlib_prefix }}sqreen_jni.${{ env.shlib_ext }} ${{ env.shlib_prefix }}sqreen_jni.${{ env.debug_ext }} ${{ github.workspace }}\native_libs\${{ env.libdir }}
        shell: cmd
        working-directory: ${{ env.tempdir }}/buildAG
      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: native_libs
          name: libsqreen_jni_${{ env.artifactsuff }}

  Native_binaries_Stage_libddwaf_linux_x86_64:
    name: Linux x86_64 (semi-static libddwaf.so)
    runs-on: ubuntu-20.04
    env:
      dockerfile: ci/alpine-libc++-static/x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          clean: true
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: Build semi-statically compiled dynamic library
        run: docker buildx build -f ${{ env.dockerfile  }}/Dockerfile --progress=plain -o ${{ github.workspace }}/libddwaf/out .
      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: libddwaf/out
          name: libddwaf_linux-x86_64

  Native_binaries_Stage_libddwaf_linux_aarch64:
    name: Linux aarch64 (semi-static libddwaf.so)
    runs-on: arm-4core-linux
    env:
      dockerfile: ci/alpine-libc++-static/aarch64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          clean: true
      - name: Install docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
      - name: Build semi-statically compiled dynamic library
        run: |
          sudo docker buildx build -f ${{ env.dockerfile  }}/Dockerfile --platform linux/arm64 --progress=plain -o ${{ github.workspace }}/libddwaf/out .
          sudo chown -R $USER:$USER ${{ github.workspace }}/libddwaf/out
      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: libddwaf/out
          name: libddwaf_linux-aarch64

  Native_binaries_Stage_linux_x86_64_musl:
    name: Linux x86_64 (musl)
    runs-on: ubuntu-20.04
    needs:
      - Native_binaries_Stage_libddwaf_linux_x86_64
    env:
      dockerfile: ci/alpine
      artifactsuff: linux_musl-x86_64
      libdir: linux/x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          clean: true
      - name: Download libddwaf artifact
        uses: actions/download-artifact@v4
        with:
          name: libddwaf_linux-x86_64
          path: libddwaf/out
      - name: Build docker linux image
        run: docker build ${{ env.dockerfile  }} -t linux_cmake
      - name: Build bindings
        run: |
          docker run --name pwaf_java_build -u $(id -u):$(id -g) -w ${{ github.workspace }} -v ${{ github.workspace }}:${{ github.workspace }} linux_cmake bash -e -c 'export VERBOSE=1;
            export LIBDDWAF_INSTALL_PREFIX=${{ github.workspace }}/libddwaf/out;
            set -x;
            mkdir buildAG &&
            cd buildAG &&
            cmake ${{ github.workspace }} -DCMAKE_PREFIX_PATH=$LIBDDWAF_INSTALL_PREFIX/share/cmake/libddwaf -DCMAKE_BUILD_TYPE=${{ env.buildType }} -DCMAKE_C_FLAGS="-fno-omit-frame-pointer" &&
            make -j &&
            patchelf --remove-needed libc.musl-x86_64.so.1 libsqreen_jni.so &&
            cp -v $LIBDDWAF_INSTALL_PREFIX/lib/libddwaf.so ${{ github.workspace }}/native_libs/${{ env.libdir }}/ &&
            cp -v $LIBDDWAF_INSTALL_PREFIX/lib/.build-id/*/*.debug ${{ github.workspace }}/native_libs/${{ env.libdir }}/libddwaf.so.debug &&
            cp -v *.so *.so.debug ${{ github.workspace }}/native_libs/${{ env.libdir }}'
        shell: bash
      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: native_libs
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_linux_aarch64_musl:
    name: Linux aarch64 (musl)
    runs-on: arm-4core-linux
    needs:
      - Native_binaries_Stage_libddwaf_linux_aarch64
    env:
      dockerfile: ci/alpine
      artifactsuff: linux_musl-aarch64
      libdir: linux/aarch64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          clean: true
      - name: Download libddwaf artifact
        uses: actions/download-artifact@v4
        with:
          name: libddwaf_linux-aarch64
          path: libddwaf/out
      - name: Install docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
      - name: Build docker linux image
        run: sudo docker build --platform linux/arm64 ${{ env.dockerfile  }} -t linux_cmake
      - name: Build bindings
        run: |
          sudo docker run --platform linux/arm64 --name pwaf_java_build -u $(id -u):$(id -g) -w ${{ github.workspace }} -v ${{ github.workspace }}:${{ github.workspace }} linux_cmake bash -e -c 'export VERBOSE=1;
            export LIBDDWAF_INSTALL_PREFIX=${{ github.workspace }}/libddwaf/out;
            set -x;
            mkdir buildAG &&
            cd buildAG &&
            cmake ${{ github.workspace }} -DCMAKE_PREFIX_PATH=$LIBDDWAF_INSTALL_PREFIX/share/cmake/libddwaf -DCMAKE_BUILD_TYPE=${{ env.buildType }} -DCMAKE_C_FLAGS="-fno-omit-frame-pointer" &&
            make -j &&
            patchelf --remove-needed libc.musl-aarch64.so.1 libsqreen_jni.so &&
            cp -v $LIBDDWAF_INSTALL_PREFIX/lib/libddwaf.so ${{ github.workspace }}/native_libs/${{ env.libdir }}/ &&
            cp -v $LIBDDWAF_INSTALL_PREFIX/lib/.build-id/*/*.debug ${{ github.workspace }}/native_libs/${{ env.libdir }}/libddwaf.so.debug &&
            cp -v *.so *.so.debug ${{ github.workspace }}/native_libs/${{ env.libdir }}'
        shell: bash
      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: native_libs
          name: jni_${{ env.artifactsuff }}

  Native_binaries_Stage_asan:
    name: ASAN/static analyzer on Linux
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout project
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Install GCC and clang
      run: |
        sudo apt-get update
        sudo apt-get install -y libc++-dev libc++abi-dev libc++abi1 libstdc++-12-dev gcc g++ \
          clang clang-tools ruby
      shell: bash
    - name: Build libddwaf
      run: |
        set -ex
        cd libddwaf
        mkdir Debug && cd Debug
        cmake .. -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER="gcc-13" \
          -DCMAKE_CXX_COMPILER="g++-13" \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_C_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_MODULE_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak" \
          -DCMAKE_SHARED_LINKER_FLAGS="-fsanitize=address -fsanitize=undefined -fsanitize=leak"
        VERBOSE=1 make -j
        DESTDIR=out make install
      shell: bash
    - name: Run static analyzer
      run: |
        ci/static_analysis
      shell: bash
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Run Binding Tests
      run: |
        set -ex
        VERBOSE=1 ./gradlew --build-cache buildNativeLibDebug -PwithASAN --info
        ASAN_OPTIONS="verbosity=1 handle_segv=0 fast_unwind_on_malloc=0 detect_leaks=0" \
          LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.8 \
          ./gradlew --build-cache -x buildNativeLibDebug --info test
      shell: bash
  Jar_File_Stage_build_jar:
    name: Build
    runs-on: ubuntu-20.04
    needs:
      - Native_binaries_Stage_macos_x86_64
      - Native_binaries_Stage_macos_aarch64
      - Native_binaries_Stage_windows_x86_64
      - Native_binaries_Stage_linux_x86_64_musl
      - Native_binaries_Stage_linux_aarch64_musl
      - Native_binaries_Stage_asan
    steps:
    - name: Setup JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/checkout@v4
      name: Checkout
      with:
        submodules: recursive
        clean: true
    - name: Download libsqreen_jni_win-x86_64
      uses: actions/download-artifact@v4
      with:
        name: libsqreen_jni_win-x86_64
        path: native_libs
    - name: Download jni_linux_musl-x86_64
      uses: actions/download-artifact@v4
      with:
        name: jni_linux_musl-x86_64
        path: native_libs
    - name: Download jni_linux_musl-aarch64
      uses: actions/download-artifact@v4
      with:
        name: jni_linux_musl-aarch64
        path: native_libs
    - name: Download libsqreen_jni_macos-x86_64
      uses: actions/download-artifact@v4
      with:
        name: libsqreen_jni_macos-x86_64
        path: native_libs
    - name: Download libsqreen_jni_macos_aarch64
      uses: actions/download-artifact@v4
      with:
        name: libsqreen_jni_macos-aarch64
        path: native_libs
    - run: find .
      working-directory: native_libs
    - name: Cache Gradle artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Build final JAR and debug symbols package
      run: ./gradlew packageDebugSymbols jar
    - name: Copy artifacts to the packages directory
      run: |
        set -ex
        mkdir -p "${{ env.tempdir }}/packages"
        cp ${{ github.workspace }}/build/libs/libsqreen-*.jar "${{ env.tempdir }}/packages"
        cp ${{ github.workspace }}/build/distributions/libsqreen-*-dbgsym.zip "${{ env.tempdir }}/packages"
      shell: bash
    - name: Publish artifacts (native libs)
      uses: actions/upload-artifact@v4
      with:
        path: native_libs
        name: native_libs
    - name: Publish artifacts (jars)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ env.tempdir }}/packages
        name: libsqreen_jni_jar

  Test:
    name: Test
    needs:
      - Jar_File_Stage_build_jar
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-20.04
            os: linux
            arch: x86_64
            jdk: temurin8
            docker_image: eclipse-temurin:8-jdk-focal
          - runs-on: ubuntu-20.04
            os: linux
            arch: x86_64
            jdk: temurin11
            docker_image: eclipse-temurin:11-jdk-focal
          - runs-on: ubuntu-20.04
            os: linux
            arch: x86_64
            jdk: temurin17
            docker_image: eclipse-temurin:17-jdk-focal
          # FIXME: codearc plugin fails with java 21, we'll need to wait for a fix
          #        or split compile and test jdk.
          #- runs-on: ubuntu-20.04
          #  os: linux
          #  arch: x86_64
          #  jdk: temurin21
          #  docker_image: eclipse-temurin:21-jdk-jammy
          - runs-on: ubuntu-20.04
            os: linux
            arch: x86_64
            jdk: temurin8
            docker_image: eclipse-temurin:8-jdk-centos7
          - runs-on: ubuntu-20.04
            os: linux
            arch: x86_64
            jdk: temurin8
            docker_image: eclipse-temurin:8-jdk-alpine
          - runs-on: ubuntu-20.04
            os: linux
            arch: x86_64
            jdk: redhat8
            docker_image: centos6:custom
            docker_image_dir: ci/centos6
          # FIXME: We have a JNI check failure with OpenJ9.
          #- runs-on: ubuntu-20.04
          #  os: linux
          #  arch: x86_64
          #  jdk: semeru8
          #  docker_image: ibm-semeru-runtimes:open-8-jdk-centos7
          - runs-on: arm-4core-linux
            os: linux
            arch: aarch64
            jdk: temurin8
            docker_image: eclipse-temurin:8-jdk-focal
          # FIXME: Gradle daemon crashes
          #- runs-on: macos-11
          #  os: macos
          #  arch: x86_64
          #  jdk: temurin8
          - runs-on: macos-12
            os: macos
            arch: x86_64
            jdk: temurin8
            java_home_var: JAVA_HOME_8_X64
          - runs-on: macos-13
            os: macos
            arch: x86_64
            jdk: temurin8
            java_home_var: JAVA_HOME_8_X64
          # FIXME: We hit https://bugs.openjdk.org/browse/JDK-8205076 on macos-13.
          #        This should be fixed when we have Temurin 17.0.11.
          # - runs-on: macos-13
          #   os: macos
          #   arch: x86_64
          #   jdk: temurin17
          #   java_home_var: JAVA_HOME_17_X64
          # FIXME: https://bugs.openjdk.org/browse/JDK-8205076
          # - runs-on: macos-14
          #   os: macos
          #   arch: x86_64
          #   jdk: temurin11
          #   java_home_var: JAVA_HOME_11_X64
          # FIXME: https://bugs.openjdk.org/browse/JDK-8205076
          # - runs-on: macos-13-xlarge
          #   os: macos
          #   arch: aarch64
          #   jdk: temurin11
          #   java_home_var: JAVA_HOME_11_arm64
          # FIXME: https://bugs.openjdk.org/browse/JDK-8205076
          # - runs-on: macos-14-xlarge
          #   os: macos
          #   arch: aarch64
          #   jdk: temurin11
          #   java_home_var: JAVA_HOME_11_arm64
          - runs-on: windows-2019
            os: windows
            arch: x86_64
            jdk: temurin8
            java_home_var: JAVA_HOME_8_X64
          - runs-on: windows-2022
            os: windows
            arch: x86_64
            jdk: temurin8
            java_home_var: JAVA_HOME_8_X64
    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v4
      name: Checkout
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: native_libs
        path: native_libs
    - name: Install docker
      run: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
      if: ${{ matrix.runs-on == 'arm-4core-linux' }}
    - name: Build Docker image
      run: sudo docker build -t ${{ matrix.docker_image }} ${{ matrix.docker_image_dir }}
      if: ${{ matrix.docker_image_dir != '' }}
    - name: Run tests (docker)
      run: sudo docker run --rm -w $(pwd) -v $(pwd):$(pwd) ${{ matrix.docker_image }} sh -c './gradlew check --no-daemon --info -Prelease -PuseReleaseBinaries -Dorg.gradle.native=false'
      if: ${{ matrix.os == 'linux' }}
    - name: Run tests (no docker)
      run: |
        set -eux
        export JAVA_HOME="$${{ matrix.java_home_var }}"
        ./gradlew check --info -Prelease -PuseReleaseBinaries
      if: ${{ matrix.os != 'linux' }}

  Publish:
    name: Publish
    runs-on: ubuntu-20.04
    needs:
      - Jar_File_Stage_build_jar
      - Test
    if: contains(github.ref, 'refs/tags/v')
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: native_libs
        path: native_libs
    - name: Publish artifacts to S3
      run: ./gradlew publish
      env:
        AWS_ACCESS_KEY_ID: AKIA5VR734GFSK4FR2PD
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      if: (success() && contains(github.ref, 'refs/tags/v'))
