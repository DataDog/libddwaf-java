parameters:
  buildType: "RelWithDebInfo"

steps:
  - script: 'git config --global url."https://github.com/".insteadOf git@github.com:'
  - checkout: self
    clean: true
    submodules: recursive
  - task: CMake@1
    displayName: Create Build Directory for libsqreen
    inputs:
      cmakeArgs: "-E make_directory $(Agent.TempDirectory)/buildPW"
  - task: CMake@1
    displayName: Create Build Directory for JNI binding
    inputs:
      cmakeArgs: "-E make_directory $(Agent.TempDirectory)/buildAG"
  - task: CMake@1
    displayName: Create Packages Directory
    inputs:
      cmakeArgs: "-E make_directory $(Agent.TempDirectory)/packages"
  - task: BatchScript@1
    displayName: Configure for x64 build
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    inputs:
      filename: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat
      arguments: x64
      modifyEnvironment: true

  - task: CMake@1
    displayName: Generate Build Scripts for libsqreen
    inputs:
      workingDirectory: "$(Agent.TempDirectory)/buildPW"
      cmakeArgs: >
        -DCMAKE_BUILD_TYPE=${{parameters.buildType}}
        -DCMAKE_INSTALL_PREFIX=$(Agent.TempDirectory)/out
        -G "${{parameters.generator}}"
        $(Build.SourcesDirectory)/libsqreen
  - task: CMake@1
    displayName: Build Binaries for libsqreen
    inputs:
      workingDirectory: "$(Agent.TempDirectory)/buildPW"
      cmakeArgs: --build .
  - task: CMake@1
    displayName: Install Binaries for libsqreen
    inputs:
      workingDirectory: "$(Agent.TempDirectory)/buildPW"
      cmakeArgs: --build . --target install

  - task: CMake@1
    displayName: Generate Build Scripts for JNI binding
    inputs:
      workingDirectory: "$(Agent.TempDirectory)/buildAG"
      cmakeArgs: >
        -DCMAKE_BUILD_TYPE=${{parameters.buildType}}
        -DCMAKE_PREFIX_PATH='$(Agent.TempDirectory)/out/share/cmake/libsqreen/'
        -G "${{parameters.generator}}"
        $(Build.SourcesDirectory)
  - task: CMake@1
    displayName: Build Binaries for JNI Binding
    inputs:
      workingDirectory: "$(Agent.TempDirectory)/buildAG"
      cmakeArgs: --build .
  - task: CMake@1
    displayName: Copy libSqreen binding binaries to packages
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    inputs:
      workingDirectory: "$(Agent.TempDirectory)/buildPW"
      cmakeArgs: >
        -E copy
        ${{parameters.shlib_prefix}}Sqreen.${{parameters.shlib_ext}}
        ${{parameters.shlib_prefix}}Sqreen.${{parameters.debug_ext}}
        $(Agent.TempDirectory)/packages
  - task: CMake@1
    displayName: Copy libSqreen binding binaries to native_libs (testing)
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    inputs:
      workingDirectory: "$(Agent.TempDirectory)/buildPW"
      cmakeArgs: >
        -E copy
        ${{parameters.shlib_prefix}}Sqreen.${{parameters.shlib_ext}}
        ${{parameters.shlib_prefix}}Sqreen.${{parameters.debug_ext}}
        $(Build.SourcesDirectory)/native_libs/${{parameters.libdir}}
  - task: CMake@1
    displayName: Copy JNI binding binaries to packages
    inputs:
      workingDirectory: "$(Agent.TempDirectory)/buildAG"
      cmakeArgs: >
        -E copy
        ${{parameters.shlib_prefix}}sqreen_jni.${{parameters.shlib_ext}}
        ${{parameters.shlib_prefix}}sqreen_jni.${{parameters.debug_ext}}
        $(Agent.TempDirectory)/packages
  - task: CMake@1
    displayName: Copy JNI binding binaries to native_libs (testing)
    inputs:
      workingDirectory: "$(Agent.TempDirectory)/buildAG"
      cmakeArgs: >
        -E copy
        ${{parameters.shlib_prefix}}sqreen_jni.${{parameters.shlib_ext}}
        ${{parameters.shlib_prefix}}sqreen_jni.${{parameters.debug_ext}}
        $(Build.SourcesDirectory)/native_libs/${{parameters.libdir}}
  - task: CacheBeta@0
    displayName: Restore Gradle Cache
    inputs:
      key: gradle | ./build.gradle
      path: $(GRADLE_USER_HOME)
  - task: Bash@3
    displayName: Run tests on binding
    inputs:
      targettype: inline
      script: |
        set -ex
        cd '$(Build.SourcesDirectory)'
        export LIBSQREEN_INSTALL_PREFIX='$(Agent.TempDirectory)/out'
        ./gradlew --build-cache check --info -PuseReleaseBinaries
        ./gradlew --stop

  - task: PublishBuildArtifacts@1
    displayName: Save Artifacts
    inputs:
      pathtoPublish: "$(Agent.TempDirectory)/packages"
      artifactName: "libsqreen_jni_${{parameters.artifactsuff}}"

